
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package SyntacticAnalyzer;

import java.io.FileInputStream;
import java.util.HashMap;
import LexicalAnalyzer.LexicalAnalyzer;
import java.io.IOException;
import java.nio.file.Paths;
import java_cup.runtime.*;
import java.io.File;
import java.util.*;
import pasito.ast.Program;
import pasito.ast.declaration.*;
import pasito.ast.expression.*;
import pasito.ast.methodSpecOrInterfaceName.*;
import pasito.ast.signature.*;
import pasito.ast.statement.*;
import pasito.ast.topLevelDecl.*;
import pasito.ast.type.*;
import pasito.ast.element.*;
import pasito.ast.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\005\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\011\005\000\002\011\006\000\002\013\006\000\002" +
    "\013\002\000\002\012\003\000\002\012\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\004\000\002\014\006" +
    "\000\002\014\003\000\002\016\006\000\002\015\006\000" +
    "\002\017\005\000\002\021\005\000\002\021\002\000\002" +
    "\020\004\000\002\020\003\000\002\020\004\000\002\022" +
    "\005\000\002\022\002\000\002\023\004\000\002\023\003" +
    "\000\002\024\003\000\002\024\004\000\002\026\003\000" +
    "\002\026\003\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\027\003\000\002\027\005\000\002\027" +
    "\006\000\002\030\006\000\002\030\005\000\002\030\004" +
    "\000\002\030\011\000\002\030\010\000\002\031\003\000" +
    "\002\031\005\000\002\031\004\000\002\032\005\000\002" +
    "\032\007\000\002\032\006\000\002\032\004\000\002\032" +
    "\003\000\002\032\005\000\002\032\007\000\002\032\006" +
    "\000\002\032\004\000\002\032\003\000\002\033\005\000" +
    "\002\033\003\000\002\007\004\000\002\007\006\000\002" +
    "\007\007\000\002\035\005\000\002\035\003\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\003\000\002\043\003\000\002\043\004\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\045\003\000\002\045\005\000\002\045\006" +
    "\000\002\045\006\000\002\045\006\000\002\045\005\000" +
    "\002\046\005\000\002\046\004\000\002\046\004\000\002" +
    "\046\003\000\002\046\007\000\002\046\006\000\002\047" +
    "\004\000\002\050\003\000\002\050\003\000\002\050\004" +
    "\000\002\050\002\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\004\000\002\051\005\000\002\052\004\000\002\054" +
    "\003\000\002\054\003\000\002\054\006\000\002\054\003" +
    "\000\002\055\004\000\002\055\005\000\002\060\005\000" +
    "\002\060\003\000\002\060\004\000\002\061\003\000\002" +
    "\061\005\000\002\057\003\000\002\057\003\000\002\056" +
    "\003\000\002\056\006\000\002\056\005\000\002\010\004" +
    "\000\002\010\006\000\002\063\005\000\002\063\002\000" +
    "\002\062\004\000\002\062\005\000\002\062\006\000\002" +
    "\005\005\000\002\053\004\000\002\064\005\000\002\066" +
    "\005\000\002\066\002\000\002\006\011\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\004\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\067\003\000\002\067\005\000\002\067\005\000\002\067" +
    "\002\000\002\071\010\000\002\071\006\000\002\072\004" +
    "\000\002\072\004\000\002\072\002\000\002\070\005\000" +
    "\002\070\011\000\002\070\006\000\002\070\010\000\002" +
    "\070\010\000\002\051\003\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\014\002\uffff\006\006\013\013\017\017\020" +
    "\012\001\002\000\004\002\u0111\001\002\000\004\056\ufff9" +
    "\001\002\000\006\004\u0102\045\u0103\001\002\000\004\056" +
    "\ufffc\001\002\000\004\056\ufffe\001\002\000\004\056\ufffa" +
    "\001\002\000\006\004\020\045\370\001\002\000\006\004" +
    "\355\045\356\001\002\000\004\056\353\001\002\000\004" +
    "\056\ufffd\001\002\000\004\056\ufffb\001\002\000\004\004" +
    "\020\001\002\000\022\004\uffc4\007\uffc4\012\uffc4\036\uffc4" +
    "\047\uffc4\053\uffc4\055\111\056\uffc4\001\002\000\020\004" +
    "\027\007\031\012\025\036\033\047\024\053\030\056\uffc3" +
    "\001\002\000\004\053\351\001\002\000\014\046\uffee\051" +
    "\uffee\053\uffee\055\uffee\056\uffee\001\002\000\036\004\133" +
    "\006\135\012\025\025\131\026\136\032\130\033\122\034" +
    "\125\035\137\036\121\043\127\045\145\047\142\050\173" +
    "\001\002\000\004\051\337\001\002\000\014\046\ufff3\051" +
    "\ufff3\053\ufff3\055\ufff3\056\ufff3\001\002\000\014\046\ufff4" +
    "\051\ufff4\053\ufff4\055\ufff4\056\ufff4\001\002\000\034\004" +
    "\133\006\135\012\025\025\131\026\136\032\130\033\122" +
    "\034\125\035\137\036\121\043\127\045\145\047\142\001" +
    "\002\000\004\051\036\001\002\000\014\046\ufff1\051\ufff1" +
    "\053\ufff1\055\ufff1\056\ufff1\001\002\000\014\004\027\007" +
    "\031\012\025\036\033\047\024\001\002\000\014\046\ufff2" +
    "\051\ufff2\053\ufff2\055\ufff2\056\ufff2\001\002\000\014\046" +
    "\ufff0\051\ufff0\053\ufff0\055\ufff0\056\ufff0\001\002\000\006" +
    "\004\037\052\uffe4\001\002\000\006\045\047\056\uffe2\001" +
    "\002\000\004\052\044\001\002\000\004\056\042\001\002" +
    "\000\006\004\037\052\uffe4\001\002\000\004\052\uffe5\001" +
    "\002\000\014\046\uffef\051\uffef\053\uffef\055\uffef\056\uffef" +
    "\001\002\000\004\056\uffe3\001\002\000\022\004\027\007" +
    "\031\012\025\036\033\045\047\047\024\051\uffe1\056\uffe1" +
    "\001\002\000\020\004\057\007\031\012\025\036\033\046" +
    "\060\047\024\057\054\001\002\000\004\046\115\001\002" +
    "\000\014\004\027\007\031\012\025\036\033\047\024\001" +
    "\002\000\004\046\uffd2\001\002\000\004\046\104\001\002" +
    "\000\014\004\027\007\031\012\025\036\033\047\024\001" +
    "\002\000\004\046\uffda\001\002\000\006\046\uffc6\055\073" +
    "\001\002\000\022\004\uffc4\007\uffc4\012\uffc4\036\uffc4\046" +
    "\uffcb\047\uffc4\055\061\057\062\001\002\000\022\004\uffdd" +
    "\007\uffdd\012\uffdd\036\uffdd\045\uffdd\047\uffdd\051\uffdd\056" +
    "\uffdd\001\002\000\020\004\070\007\031\012\025\036\033" +
    "\046\uffcc\047\024\057\067\001\002\000\014\004\027\007" +
    "\031\012\025\036\033\047\024\001\002\000\006\046\uffd9" +
    "\055\064\001\002\000\004\046\uffd8\001\002\000\020\004" +
    "\uffc5\007\uffc5\012\uffc5\036\uffc5\047\uffc5\053\uffc5\056\uffc5" +
    "\001\002\000\004\046\uffcf\001\002\000\014\004\027\007" +
    "\031\012\025\036\033\047\024\001\002\000\020\004\uffc4" +
    "\007\uffc4\012\uffc4\036\uffc4\046\uffcb\047\uffc4\055\061\001" +
    "\002\000\006\046\uffcd\055\072\001\002\000\004\046\uffce" +
    "\001\002\000\020\004\076\007\031\012\025\036\033\046" +
    "\uffc7\047\024\057\075\001\002\000\004\046\uffca\001\002" +
    "\000\014\004\027\007\031\012\025\036\033\047\024\001" +
    "\002\000\006\046\uffcb\055\077\001\002\000\020\004\076" +
    "\007\031\012\025\036\033\046\uffcc\047\024\057\067\001" +
    "\002\000\006\046\uffc8\055\101\001\002\000\004\046\uffc9" +
    "\001\002\000\006\046\uffd0\055\103\001\002\000\004\046" +
    "\uffd1\001\002\000\022\004\uffdc\007\uffdc\012\uffdc\036\uffdc" +
    "\045\uffdc\047\uffdc\051\uffdc\056\uffdc\001\002\000\006\046" +
    "\uffd5\055\106\001\002\000\006\004\107\046\uffd6\001\002" +
    "\000\020\004\uffc4\007\uffc4\012\uffc4\036\uffc4\047\uffc4\055" +
    "\111\057\112\001\002\000\004\046\uffd7\001\002\000\004" +
    "\004\020\001\002\000\014\004\027\007\031\012\025\036" +
    "\033\047\024\001\002\000\006\046\uffd3\055\114\001\002" +
    "\000\004\046\uffd4\001\002\000\022\004\uffdb\007\uffdb\012" +
    "\uffdb\036\uffdb\045\uffdb\047\uffdb\051\uffdb\056\uffdb\001\002" +
    "\000\006\051\uffde\056\uffde\001\002\000\006\051\uffe0\056" +
    "\uffe0\001\002\000\006\051\uffdf\056\uffdf\001\002\000\034" +
    "\004\uffb2\006\uffb2\012\uffb2\025\uffb2\026\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\043\uffb2\045\uffb2\047\uffb2" +
    "\001\002\000\052\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\001\002\000\044\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\046\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\001\002\000\004\051\323\001\002\000" +
    "\034\004\uffb4\006\uffb4\012\uffb4\025\uffb4\026\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\043\uffb4\045\uffb4\047" +
    "\uffb4\001\002\000\004\051\uff97\001\002\000\034\004\uffb1" +
    "\006\uffb1\012\uffb1\025\uffb1\026\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\043\uffb1\045\uffb1\047\uffb1\001\002" +
    "\000\052\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\001\002\000\052\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\061\uff9d\001\002\000\052\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\001\002\000\052\034\uff65\035\uff65\036\uff65\037\uff65\040" +
    "\uff65\041\uff65\042\uff65\045\uff65\046\uff65\047\uff65\050\uff65" +
    "\051\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057" +
    "\uff65\060\uff65\061\uff65\001\002\000\052\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\045\273\046" +
    "\uffb6\047\272\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\274\001\002\000" +
    "\004\045\047\001\002\000\052\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\001\002\000\034\004" +
    "\uffb3\006\uffb3\012\uffb3\025\uffb3\026\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\043\uffb3\045\uffb3\047\uffb3\001" +
    "\002\000\004\051\uff96\001\002\000\052\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\001\002\000" +
    "\040\004\133\006\135\012\025\025\131\026\136\032\130" +
    "\033\122\034\125\035\137\036\121\043\127\045\145\047" +
    "\142\050\173\057\174\001\002\000\006\055\171\056\uffc2" +
    "\001\002\000\004\051\uff94\001\002\000\034\004\133\006" +
    "\135\012\025\025\131\026\136\032\130\033\122\034\125" +
    "\035\137\036\121\043\127\045\145\047\142\001\002\000" +
    "\032\034\154\035\155\036\157\037\156\040\153\041\151" +
    "\042\152\046\uffbf\051\uffbf\055\uffbf\056\uffbf\057\uffbf\001" +
    "\002\000\034\004\133\006\135\012\025\025\131\026\136" +
    "\032\130\033\122\034\125\035\137\036\121\043\127\045" +
    "\145\047\142\001\002\000\044\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\046\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\001\002\000\034\004\133\006\135\012\025\025" +
    "\131\026\136\032\130\033\122\034\125\035\137\036\121" +
    "\043\127\045\145\047\142\001\002\000\034\004\133\006" +
    "\135\012\025\025\131\026\136\032\130\033\122\034\125" +
    "\035\137\036\121\043\127\045\145\047\142\001\002\000" +
    "\034\004\133\006\135\012\025\025\131\026\136\032\130" +
    "\033\122\034\125\035\137\036\121\043\127\045\145\047" +
    "\142\001\002\000\034\004\133\006\135\012\025\025\131" +
    "\026\136\032\130\033\122\034\125\035\137\036\121\043" +
    "\127\045\145\047\142\001\002\000\034\004\133\006\135" +
    "\012\025\025\131\026\136\032\130\033\122\034\125\035" +
    "\137\036\121\043\127\045\145\047\142\001\002\000\034" +
    "\004\133\006\135\012\025\025\131\026\136\032\130\033" +
    "\122\034\125\035\137\036\121\043\127\045\145\047\142" +
    "\001\002\000\034\004\133\006\135\012\025\025\131\026" +
    "\136\032\130\033\122\034\125\035\137\036\121\043\127" +
    "\045\145\047\142\001\002\000\044\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\046\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\001\002\000\044\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\046\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\001\002\000\044\034\uffbd\035\uffbd\036\157\037" +
    "\156\040\uffbd\041\uffbd\042\uffbd\046\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060" +
    "\uffbd\001\002\000\044\034\uffbe\035\uffbe\036\157\037\156" +
    "\040\uffbe\041\uffbe\042\uffbe\046\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\001\002\000\044\034\154\035\155\036\157\037\156\040" +
    "\uffb8\041\151\042\152\046\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\001" +
    "\002\000\044\034\154\035\155\036\157\037\156\040\uffba" +
    "\041\uffba\042\uffba\046\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\001\002" +
    "\000\044\034\154\035\155\036\157\037\156\040\uffb9\041" +
    "\uffb9\042\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000" +
    "\022\034\154\035\155\036\157\037\156\040\153\041\151" +
    "\042\152\046\170\001\002\000\052\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\040\uff99\041\uff99\042\uff99\045\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055" +
    "\uff99\056\uff99\057\uff99\060\uff99\061\uff99\001\002\000\034" +
    "\004\133\006\135\012\025\025\131\026\136\032\130\033" +
    "\122\034\125\035\137\036\121\043\127\045\145\047\142" +
    "\001\002\000\036\034\154\035\155\036\157\037\156\040" +
    "\153\041\151\042\152\046\uffc0\051\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\001\002\000\014\004\027\007" +
    "\031\012\025\036\033\047\024\001\002\000\004\050\200" +
    "\001\002\000\022\034\154\035\155\036\157\037\156\040" +
    "\153\041\151\042\152\050\176\001\002\000\014\004\027" +
    "\007\031\012\025\036\033\047\024\001\002\000\014\046" +
    "\uffec\051\uffec\053\uffec\055\uffec\056\uffec\001\002\000\014" +
    "\004\027\007\031\012\025\036\033\047\024\001\002\000" +
    "\004\051\uff95\001\002\000\014\046\uffeb\051\uffeb\053\uffeb" +
    "\055\uffeb\056\uffeb\001\002\000\004\051\206\001\002\000" +
    "\052\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\001\002\000\052\034\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\045\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056" +
    "\uff7f\057\uff7f\060\uff7f\061\uff7f\001\002\000\056\004\133" +
    "\006\135\012\025\013\013\016\213\017\017\020\012\021" +
    "\211\022\214\025\131\026\136\032\130\033\122\034\125" +
    "\035\137\036\121\043\127\045\145\047\142\051\206\052" +
    "\uff7c\056\uff70\001\002\000\004\056\uff74\001\002\000\004" +
    "\052\271\001\002\000\040\004\133\006\135\012\025\023" +
    "\245\025\131\026\136\032\130\033\122\034\125\035\137" +
    "\036\121\043\127\045\145\047\142\056\uff70\001\002\000" +
    "\010\053\242\054\241\055\171\001\002\000\036\004\133" +
    "\006\135\012\025\025\131\026\136\032\130\033\122\034" +
    "\125\035\137\036\121\043\127\045\145\047\142\056\uff70" +
    "\001\002\000\036\004\133\006\135\012\025\025\131\026" +
    "\136\032\130\033\122\034\125\035\137\036\121\043\127" +
    "\045\145\047\142\056\uff78\001\002\000\004\056\uff75\001" +
    "\002\000\004\056\uff79\001\002\000\004\056\223\001\002" +
    "\000\032\034\154\035\155\036\157\037\156\040\153\041" +
    "\151\042\152\051\uff73\053\uffbf\054\uffbf\055\uffbf\056\uff73" +
    "\001\002\000\004\056\uff7a\001\002\000\004\056\uff76\001" +
    "\002\000\056\004\133\006\135\012\025\013\013\016\213" +
    "\017\017\020\012\021\211\022\214\025\131\026\136\032" +
    "\130\033\122\034\125\035\137\036\121\043\127\045\145" +
    "\047\142\051\206\052\uff7c\056\uff70\001\002\000\004\052" +
    "\uff7d\001\002\000\006\055\171\056\uff77\001\002\000\004" +
    "\056\235\001\002\000\032\034\154\035\155\036\157\037" +
    "\156\040\153\041\151\042\152\051\206\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uff73\001\002\000\006\014\231\056\uff6b\001" +
    "\002\000\006\016\213\051\206\001\002\000\004\056\uff6e" +
    "\001\002\000\004\056\uff6c\001\002\000\004\056\uff6d\001" +
    "\002\000\034\004\133\006\135\012\025\025\131\026\136" +
    "\032\130\033\122\034\125\035\137\036\121\043\127\045" +
    "\145\047\142\001\002\000\022\034\154\035\155\036\157" +
    "\037\156\040\153\041\151\042\152\051\206\001\002\000" +
    "\006\014\231\056\uff6b\001\002\000\004\056\uff6f\001\002" +
    "\000\034\004\133\006\135\012\025\025\131\026\136\032" +
    "\130\033\122\034\125\035\137\036\121\043\127\045\145" +
    "\047\142\001\002\000\034\004\133\006\135\012\025\025" +
    "\131\026\136\032\130\033\122\034\125\035\137\036\121" +
    "\043\127\045\145\047\142\001\002\000\010\051\uff72\055" +
    "\171\056\uff72\001\002\000\010\051\uff71\055\171\056\uff71" +
    "\001\002\000\034\004\133\006\135\012\025\025\131\026" +
    "\136\032\130\033\122\034\125\035\137\036\121\043\127" +
    "\045\145\047\142\001\002\000\010\053\260\054\257\055" +
    "\171\001\002\000\004\056\252\001\002\000\032\034\154" +
    "\035\155\036\157\037\156\040\153\041\151\042\152\051" +
    "\206\053\uffbf\054\uffbf\055\uffbf\056\uff73\001\002\000\004" +
    "\056\uff6a\001\002\000\036\004\133\006\135\012\025\025" +
    "\131\026\136\032\130\033\122\034\125\035\137\036\121" +
    "\043\127\045\145\047\142\056\uff70\001\002\000\004\056" +
    "\254\001\002\000\036\004\133\006\135\012\025\025\131" +
    "\026\136\032\130\033\122\034\125\035\137\036\121\043" +
    "\127\045\145\047\142\051\uff70\001\002\000\004\051\206" +
    "\001\002\000\004\056\uff69\001\002\000\036\004\133\006" +
    "\135\012\025\023\264\025\131\026\136\032\130\033\122" +
    "\034\125\035\137\036\121\043\127\045\145\047\142\001" +
    "\002\000\036\004\133\006\135\012\025\023\261\025\131" +
    "\026\136\032\130\033\122\034\125\035\137\036\121\043" +
    "\127\045\145\047\142\001\002\000\034\004\133\006\135" +
    "\012\025\025\131\026\136\032\130\033\122\034\125\035" +
    "\137\036\121\043\127\045\145\047\142\001\002\000\022" +
    "\034\154\035\155\036\157\037\156\040\153\041\151\042" +
    "\152\051\206\001\002\000\004\056\uff66\001\002\000\034" +
    "\004\133\006\135\012\025\025\131\026\136\032\130\033" +
    "\122\034\125\035\137\036\121\043\127\045\145\047\142" +
    "\001\002\000\022\034\154\035\155\036\157\037\156\040" +
    "\153\041\151\042\152\051\206\001\002\000\004\056\uff67" +
    "\001\002\000\022\034\154\035\155\036\157\037\156\040" +
    "\153\041\151\042\152\051\206\001\002\000\004\056\uff68" +
    "\001\002\000\054\014\uff7e\034\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\041\uff7e\042\uff7e\045\uff7e\046\uff7e\047\uff7e" +
    "\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056" +
    "\uff7e\057\uff7e\060\uff7e\061\uff7e\001\002\000\036\004\133" +
    "\006\135\012\025\025\131\026\136\032\130\033\122\034" +
    "\125\035\137\036\121\043\127\045\145\047\142\060\306" +
    "\001\002\000\036\004\133\006\135\012\025\025\131\026" +
    "\136\032\130\033\122\034\125\035\137\036\121\043\127" +
    "\045\145\046\277\047\142\001\002\000\004\004\275\001" +
    "\002\000\052\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\001\002\000\004\046\305\001\002\000" +
    "\052\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\061\uffab\001\002\000\010\046\uffa0\055\301\057\303\001" +
    "\002\000\036\004\133\006\135\012\025\025\131\026\136" +
    "\032\130\033\122\034\125\035\137\036\121\043\127\045" +
    "\145\046\uffa2\047\142\001\002\000\004\046\uffa4\001\002" +
    "\000\006\046\uffa3\055\304\001\002\000\004\046\uffa1\001" +
    "\002\000\052\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\001\002\000\036\004\133\006\135\012" +
    "\025\025\131\026\136\032\130\033\122\034\125\035\137" +
    "\036\121\043\127\045\145\047\142\050\uffa7\001\002\000" +
    "\004\050\316\001\002\000\024\034\154\035\155\036\157" +
    "\037\156\040\153\041\151\042\152\050\312\060\311\001" +
    "\002\000\036\004\133\006\135\012\025\025\131\026\136" +
    "\032\130\033\122\034\125\035\137\036\121\043\127\045" +
    "\145\047\142\050\uffa9\001\002\000\052\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\001\002\000" +
    "\024\034\154\035\155\036\157\037\156\040\153\041\151" +
    "\042\152\050\uffaa\060\314\001\002\000\034\004\133\006" +
    "\135\012\025\025\131\026\136\032\130\033\122\034\125" +
    "\035\137\036\121\043\127\045\145\047\142\001\002\000" +
    "\022\034\154\035\155\036\157\037\156\040\153\041\151" +
    "\042\152\050\uffa6\001\002\000\052\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\001\002\000\024" +
    "\034\154\035\155\036\157\037\156\040\153\041\151\042" +
    "\152\050\uffa8\060\320\001\002\000\034\004\133\006\135" +
    "\012\025\025\131\026\136\032\130\033\122\034\125\035" +
    "\137\036\121\043\127\045\145\047\142\001\002\000\022" +
    "\034\154\035\155\036\157\037\156\040\153\041\151\042" +
    "\152\050\uffa5\001\002\000\052\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\001\002\000\040\004" +
    "\133\006\135\012\025\025\131\026\136\032\130\033\122" +
    "\034\125\035\137\036\121\043\127\045\145\047\142\051" +
    "\323\052\324\001\002\000\052\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\057\uff93\060\uff93\061\uff93\001\002\000\006\052" +
    "\uff90\055\335\001\002\000\010\052\uff8e\055\uff8e\060\333" +
    "\001\002\000\010\052\uff8b\055\uff8b\060\uff8b\001\002\000" +
    "\004\052\332\001\002\000\026\034\154\035\155\036\157" +
    "\037\156\040\153\041\151\042\152\052\uff8c\055\uff8c\060" +
    "\uff8c\001\002\000\052\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\040\uff92\041\uff92\042\uff92\045\uff92\046\uff92\047\uff92\050" +
    "\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\061\uff92\001\002\000\036\004\133\006" +
    "\135\012\025\025\131\026\136\032\130\033\122\034\125" +
    "\035\137\036\121\043\127\045\145\047\142\051\323\001" +
    "\002\000\006\052\uff8d\055\uff8d\001\002\000\040\004\133" +
    "\006\135\012\025\025\131\026\136\032\130\033\122\034" +
    "\125\035\137\036\121\043\127\045\145\047\142\051\323" +
    "\052\uff8f\001\002\000\004\052\uff91\001\002\000\010\004" +
    "\340\036\343\052\uffe9\001\002\000\016\004\027\007\031" +
    "\012\025\036\033\047\024\056\uffe7\001\002\000\004\052" +
    "\347\001\002\000\004\056\345\001\002\000\004\004\344" +
    "\001\002\000\004\056\uffe6\001\002\000\010\004\340\036" +
    "\343\052\uffe9\001\002\000\004\052\uffea\001\002\000\014" +
    "\046\uffed\051\uffed\053\uffed\055\uffed\056\uffed\001\002\000" +
    "\004\056\uffe8\001\002\000\034\004\133\006\135\012\025" +
    "\025\131\026\136\032\130\033\122\034\125\035\137\036" +
    "\121\043\127\045\145\047\142\001\002\000\006\055\171" +
    "\056\uffc1\001\002\000\014\002\uffff\006\006\013\013\017" +
    "\017\020\012\001\002\000\004\002\001\001\002\000\014" +
    "\004\027\007\031\012\025\036\033\047\024\001\002\000" +
    "\006\004\357\046\ufff5\001\002\000\014\004\027\007\031" +
    "\012\025\036\033\047\024\001\002\000\004\046\361\001" +
    "\002\000\004\056\ufff7\001\002\000\004\056\363\001\002" +
    "\000\006\004\357\046\ufff5\001\002\000\004\046\ufff6\001" +
    "\002\000\004\056\ufff8\001\002\000\016\004\027\007\031" +
    "\012\025\036\033\047\024\053\376\001\002\000\004\056" +
    "\uff87\001\002\000\006\004\uff84\046\uff84\001\002\000\006" +
    "\004\020\046\373\001\002\000\004\056\374\001\002\000" +
    "\004\056\uff86\001\002\000\006\004\uff85\046\uff85\001\002" +
    "\000\006\053\u0100\056\uff83\001\002\000\034\004\133\006" +
    "\135\012\025\025\131\026\136\032\130\033\122\034\125" +
    "\035\137\036\121\043\127\045\145\047\142\001\002\000" +
    "\006\055\171\056\uff82\001\002\000\034\004\133\006\135" +
    "\012\025\025\131\026\136\032\130\033\122\034\125\035" +
    "\137\036\121\043\127\045\145\047\142\001\002\000\006" +
    "\055\171\056\uff81\001\002\000\004\045\047\001\002\000" +
    "\004\004\u0104\001\002\000\006\004\u0105\045\u0107\001\002" +
    "\000\004\046\uff8a\001\002\000\004\046\u010d\001\002\000" +
    "\010\004\u0105\036\u0109\045\u0107\001\002\000\004\046\u010c" +
    "\001\002\000\004\004\u010a\001\002\000\004\045\u010b\001" +
    "\002\000\004\046\uff89\001\002\000\004\046\uff88\001\002" +
    "\000\004\004\u010e\001\002\000\004\045\047\001\002\000" +
    "\004\056\uff7b\001\002\000\004\056\uff80\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\022\002\003\003\013\004\007\005\014\006" +
    "\006\007\015\010\010\011\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\365\062\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\020\001\001\000\002" +
    "\001\001\000\014\012\021\014\025\015\033\016\031\017" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\137\016\125\017\143\034\174\043\122\044\146\045" +
    "\133\051\131\052\140\054\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\015\137\016" +
    "\125\017\143\034\145\035\142\043\122\044\146\045\133" +
    "\051\131\052\140\054\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\034\014\025\015\033\016\031" +
    "\017\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\037\023\040\001\001\000\006\024\044\025\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\042\023\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\115\014\025\015\033\016" +
    "\031\017\022\025\117\026\116\001\001\000\024\014\055" +
    "\015\033\016\031\017\022\027\052\030\054\031\047\032" +
    "\051\033\050\001\001\000\002\001\001\000\014\012\104" +
    "\014\025\015\033\016\031\017\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\101\014\025\015\033" +
    "\016\031\017\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\055" +
    "\015\033\016\031\017\022\032\065\033\064\001\001\000" +
    "\014\012\062\014\025\015\033\016\031\017\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\070\014\025\015\033\016\031" +
    "\017\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\055\015\033\016\031\017\022" +
    "\032\073\001\001\000\002\001\001\000\014\012\077\014" +
    "\025\015\033\016\031\017\022\001\001\000\002\001\001" +
    "\000\014\014\055\015\033\016\031\017\022\032\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\107\033\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\064\001\001\000\014\012\112\014" +
    "\025\015\033\016\031\017\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\202\025\045\053\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\015\137\016\125\017\143" +
    "\034\174\043\122\044\146\045\133\051\131\052\140\054" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\137\016\125\017\143\034\166\043\122\044\146\045" +
    "\133\051\131\052\140\054\123\001\001\000\002\001\001" +
    "\000\024\015\137\016\125\017\143\043\147\044\146\045" +
    "\133\051\131\052\140\054\123\001\001\000\002\001\001" +
    "\000\026\015\137\016\125\017\143\034\165\043\122\044" +
    "\146\045\133\051\131\052\140\054\123\001\001\000\026" +
    "\015\137\016\125\017\143\034\164\043\122\044\146\045" +
    "\133\051\131\052\140\054\123\001\001\000\026\015\137" +
    "\016\125\017\143\034\163\043\122\044\146\045\133\051" +
    "\131\052\140\054\123\001\001\000\026\015\137\016\125" +
    "\017\143\034\162\043\122\044\146\045\133\051\131\052" +
    "\140\054\123\001\001\000\026\015\137\016\125\017\143" +
    "\034\161\043\122\044\146\045\133\051\131\052\140\054" +
    "\123\001\001\000\026\015\137\016\125\017\143\034\160" +
    "\043\122\044\146\045\133\051\131\052\140\054\123\001" +
    "\001\000\026\015\137\016\125\017\143\034\157\043\122" +
    "\044\146\045\133\051\131\052\140\054\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\137" +
    "\016\125\017\143\034\171\043\122\044\146\045\133\051" +
    "\131\052\140\054\123\001\001\000\002\001\001\000\014" +
    "\012\201\014\025\015\033\016\031\017\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\176\014\025" +
    "\015\033\016\031\017\022\001\001\000\002\001\001\000" +
    "\014\012\200\014\025\015\033\016\031\017\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\004\220" +
    "\007\015\010\010\011\004\015\137\016\125\017\143\034" +
    "\217\035\211\043\122\044\146\045\133\051\131\052\140" +
    "\054\123\064\221\065\216\066\207\067\215\070\206\071" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\015\137\016\125\017\143\034\247\035\245\043\122\044" +
    "\146\045\133\051\131\052\140\054\123\067\246\001\001" +
    "\000\002\001\001\000\032\015\137\016\125\017\143\034" +
    "\226\035\211\043\122\044\146\045\133\051\131\052\140" +
    "\054\123\067\225\001\001\000\030\015\137\016\125\017" +
    "\143\034\145\035\224\043\122\044\146\045\133\051\131" +
    "\052\140\054\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\004\220\007\015\010\010\011" +
    "\004\015\137\016\125\017\143\034\217\035\211\043\122" +
    "\044\146\045\133\051\131\052\140\054\123\064\221\065" +
    "\216\066\223\067\215\070\206\071\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\227\001\001\000\004\072\231\001\001\000\006\064\232" +
    "\071\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\137\016\125\017\143\034\235" +
    "\043\122\044\146\045\133\051\131\052\140\054\123\001" +
    "\001\000\004\064\236\001\001\000\004\072\237\001\001" +
    "\000\002\001\001\000\030\015\137\016\125\017\143\034" +
    "\145\035\243\043\122\044\146\045\133\051\131\052\140" +
    "\054\123\001\001\000\030\015\137\016\125\017\143\034" +
    "\145\035\242\043\122\044\146\045\133\051\131\052\140" +
    "\054\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\137\016\125\017\143\034\266\043\122\044\146" +
    "\045\133\051\131\052\140\054\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\250\001\001\000\002" +
    "\001\001\000\032\015\137\016\125\017\143\034\217\035" +
    "\211\043\122\044\146\045\133\051\131\052\140\054\123" +
    "\067\252\001\001\000\002\001\001\000\032\015\137\016" +
    "\125\017\143\034\217\035\211\043\122\044\146\045\133" +
    "\051\131\052\140\054\123\067\254\001\001\000\004\064" +
    "\255\001\001\000\002\001\001\000\030\015\137\016\125" +
    "\017\143\034\145\035\243\043\122\044\146\045\133\051" +
    "\131\052\140\054\123\001\001\000\030\015\137\016\125" +
    "\017\143\034\145\035\242\043\122\044\146\045\133\051" +
    "\131\052\140\054\123\001\001\000\026\015\137\016\125" +
    "\017\143\034\261\043\122\044\146\045\133\051\131\052" +
    "\140\054\123\001\001\000\004\064\262\001\001\000\002" +
    "\001\001\000\026\015\137\016\125\017\143\034\264\043" +
    "\122\044\146\045\133\051\131\052\140\054\123\001\001" +
    "\000\004\064\265\001\001\000\002\001\001\000\004\064" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\137\016\125\017\143\034\307\043\122\044\146\045" +
    "\133\046\306\051\131\052\140\054\123\001\001\000\032" +
    "\015\137\016\125\017\143\034\145\035\277\043\122\044" +
    "\146\045\133\047\275\051\131\052\140\054\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\301\001\001\000\026\015\137" +
    "\016\125\017\143\034\171\043\122\044\146\045\133\051" +
    "\131\052\140\054\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\015" +
    "\137\016\125\017\143\034\316\043\122\044\146\045\133" +
    "\051\131\052\140\054\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\137\016\125\017\143\034\312" +
    "\043\122\044\146\045\133\051\131\052\140\054\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\137" +
    "\016\125\017\143\034\314\043\122\044\146\045\133\051" +
    "\131\052\140\054\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\137\016\125\017" +
    "\143\034\320\043\122\044\146\045\133\051\131\052\140" +
    "\054\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\015\137\016\125\017\143\034\330\043\122\044\146" +
    "\045\133\051\131\052\140\054\123\055\326\057\325\060" +
    "\327\061\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\015\137\016\125" +
    "\017\143\034\330\043\122\044\146\045\133\051\131\052" +
    "\140\054\123\055\326\057\333\001\001\000\002\001\001" +
    "\000\036\015\137\016\125\017\143\034\330\043\122\044" +
    "\146\045\133\051\131\052\140\054\123\055\326\057\325" +
    "\060\335\061\324\001\001\000\002\001\001\000\006\020" +
    "\341\021\340\001\001\000\014\012\347\014\025\015\033" +
    "\016\031\017\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\341" +
    "\021\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\137\016\125\017\143\034\145" +
    "\035\351\043\122\044\146\045\133\051\131\052\140\054" +
    "\123\001\001\000\002\001\001\000\022\002\353\003\013" +
    "\004\007\005\014\006\006\007\015\010\010\011\004\001" +
    "\001\000\002\001\001\000\014\012\364\014\025\015\033" +
    "\016\031\017\022\001\001\000\004\013\357\001\001\000" +
    "\014\012\361\014\025\015\033\016\031\017\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\374\014\025\015\033\016\031\017\022\001" +
    "\001\000\002\001\001\000\004\063\370\001\001\000\006" +
    "\033\365\062\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\137" +
    "\016\125\017\143\034\145\035\376\043\122\044\146\045" +
    "\133\051\131\052\140\054\123\001\001\000\002\001\001" +
    "\000\030\015\137\016\125\017\143\034\145\035\u0100\043" +
    "\122\044\146\045\133\051\131\052\140\054\123\001\001" +
    "\000\002\001\001\000\010\024\202\025\045\053\u010f\001" +
    "\001\000\002\001\001\000\004\056\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\202\025\045\053\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

    ComplexSymbolFactory f = new ComplexSymbolFactory(); // cria instância do ComplexSymbolFactory
    symbolFactory = f;		
 	 File file = new File("Teste.Pasito");	
 	 FileInputStream fis = null;
	 Integer stateNumber; //stateNumber = scanner.states.getNumber( id ); 
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
/*
    File file = new File(Paths.get("").toAbsolutePath().toString() + "/Files4Test/" + "entrada-completa.pas"); // fazendo ler direto o arquivo de entrada em Pasito
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(file);
    } catch (IOException e) {
        e.printStackTrace();
    }*/
    lexer = new LexicalAnalyzer(f,fis); // chamando construtor do LexicalAnalyzer com symbolFactory e arquivo de entrada em pasito

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
	
    return lexer.next_token(); // chama próximo token

    }

//@@CUPDBG0

  protected LexicalAnalyzer lexer; // cria objeto LexicalAnalyzer (classe criada pelo JFlex com os automatos)
  

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= TopLevelDecl SEMICOLON Program 
            {
              Program RESULT =null;
		Location topDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location topDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TopLevelDecl> topDecs = (List<TopLevelDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location progxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location progxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Program prog = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 prog.declarations.addAll(0,topDecs);
              RESULT = prog; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              Program RESULT =null;
		//@@CUPDBG4
 RESULT = new Program(new LinkedList<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TopLevelDecl ::= Declaration 
            {
              List<TopLevelDecl> RESULT =null;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Declaration> decl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 
					List<TopLevelDecl> tld = new LinkedList<>();
                    for (Declaration d : decl)
						tld.add(new Dec(d));
					RESULT = tld; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TopLevelDecl ::= FunctionDecl 
            {
              List<TopLevelDecl> RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FunctionDecl func = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 
					List<TopLevelDecl> tld = new LinkedList<>();                    
					tld.add(func);
					RESULT = tld; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TopLevelDecl ::= MethodDecl 
            {
              List<TopLevelDecl> RESULT =null;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MethodDecl method = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 
					List<TopLevelDecl> tld = new LinkedList<>();                    
					tld.add(method);
					RESULT = tld; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaration ::= ConstDecl 
            {
              List<Declaration> RESULT =null;
		Location constDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ConstDecl> constDecl = (List<ConstDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 				
					List<Declaration> dec = new LinkedList<>();
					for(ConstDecl c: constDecl)
						dec.add(c);
				RESULT = dec;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaration ::= VarDecl 
            {
              List<Declaration> RESULT =null;
		Location varDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VarDecl> varDecl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9

					List<Declaration> dec = new LinkedList<>();	
					int i = 0;									
					for(VarDecl v: varDecl)	{				
							System.out.println("Declaration : VARDECL.name = "+ varDecl.get(i).name);
							if (varDecl.get(i).type != null){
								TypeName tp = (TypeName) varDecl.get(i).type;
								System.out.println("Declaration : VARDECL.type = "+ tp.name);
							}
							UnaryExpression uexp = (UnaryExpression) varDecl.get(i).exp;
							if (uexp.exp instanceof IntLiteral){
								IntLiteral xp = (IntLiteral) uexp.exp;
								System.out.println("Declaration : VARDECL.exp = "+ xp.value);		
							}
							
						   if (uexp.exp instanceof FloatLiteral){
								FloatLiteral xp = (FloatLiteral) uexp.exp;
								System.out.println("Declaration : VARDECL.exp = "+ xp.value);		
							}

						   if (uexp.exp instanceof BooleanLiteral){
								BooleanLiteral xp = (BooleanLiteral) uexp.exp;
								System.out.println("Declaration : VARDECL.exp = "+ xp.value);		
							}
							i++;
							dec.add(v);	
					}					
					RESULT = dec;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= TypeDecl 
            {
              List<Declaration> RESULT =null;
		Location typeDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeDecl> typeDecl = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
	
					List<Declaration> dec = new LinkedList<>();
					for(TypeDecl d: typeDecl)
						dec.add(d);
					RESULT = dec; 					
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TypeDecl ::= TYPE ID Type 
            {
              List<TypeDecl> RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 	
				List<TypeDecl> td = new LinkedList<>(); 
				td.add(new TypeDecl(nm, type));						
				RESULT = td;	
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TypeDecl ::= TYPE LPAR TypeSpecList RPAR 
            {
              List<TypeDecl> RESULT =null;
		Location typeDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typeDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<TypeDecl> typeDecls = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG12
				   				
			   RESULT = typeDecls;	 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TypeSpecList ::= ID Type SEMICOLON TypeSpecList 
            {
              List<TypeDecl> RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tyDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tyDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeDecl> tyDecs = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
					
					tyDecs.add(0, new TypeDecl(nm, type));
					RESULT = tyDecs;
					
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeSpecList ::= 
            {
              List<TypeDecl> RESULT =null;
		//@@CUPDBG14
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= ID 
            {
              Type RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 RESULT = new TypeName(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= TypeLit 
            {
              Type RESULT =null;
		Location Tlitxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Tlitxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type Tlit = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16

			RESULT = Tlit; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeLit ::= ArrayType 
            {
              Type RESULT =null;
		Location arrayxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arrayxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayType array = (ArrayType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 RESULT =  array;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeLit ::= StructType 
            {
              Type RESULT =null;
		Location structxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location structxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StructType struct = (StructType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT = struct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeLit ::= TIMES Type 
            {
              Type RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeLit ::= INTERFACE LBRACK MethodSpecList RBRACK 
            {
              Type RESULT =null;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<MethodSpec> method = (List<MethodSpec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG20
 
				List<MethodSpecOrInterfaceName> met = new LinkedList<>();
				for(MethodSpec m : method)
					met.add(m);
				RESULT = new InterfaceType(met); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeLit ::= SliceType 
            {
              Type RESULT =null;
		Location slicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SliceType slice = (SliceType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 RESULT = slice; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StructType ::= STRUCT LBRACK FieldDeclList RBRACK 
            {
              StructType RESULT =null;
		Location fieldDecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fieldDecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<FieldDecl> fieldDec = (List<FieldDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG22
 RESULT = new StructType(fieldDec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ArrayType ::= LSBRACK Expression RSBRACK Type 
            {
              ArrayType RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23

				RESULT = new ArrayType(exp, type);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SliceType ::= LSBRACK RSBRACK Type 
            {
              SliceType RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT = new SliceType(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SliceType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldDeclList ::= FieldDecl SEMICOLON FieldDeclList 
            {
              List<FieldDecl> RESULT =null;
		Location fieldeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fieldeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		FieldDecl fieldecl = (FieldDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fieldeclListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fieldeclListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FieldDecl> fieldeclList = (List<FieldDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 
					fieldeclList.add(0,fieldecl);
					RESULT = fieldeclList;
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldDeclList ::= 
            {
              List<FieldDecl> RESULT =null;
		//@@CUPDBG26
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldDecl ::= ID Type 
            {
              FieldDecl RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT = new FieldDecl(name,type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FieldDecl ::= ID 
            {
              FieldDecl RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT = new FieldDecl(name,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FieldDecl ::= TIMES ID 
            {
              FieldDecl RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 RESULT = new FieldDecl(name,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodSpecList ::= MethodSpec SEMICOLON MethodSpecList 
            {
              List<MethodSpec> RESULT =null;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MethodSpec method = (MethodSpec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location listMethodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location listMethodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<MethodSpec> listMethod = (List<MethodSpec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 
					listMethod.add(0,method);				
					RESULT = listMethod;
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodSpecList ::= 
            {
              List<MethodSpec> RESULT =null;
		//@@CUPDBG31
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodSpec ::= ID Signature 
            {
              MethodSpec RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sigxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sigxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Signature sig = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = new MethodSpec(id,sig); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodSpec ::= ID 
            {
              MethodSpec RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 RESULT = new MethodSpec(id,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Signature ::= Parameters 
            {
              Signature RESULT =null;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> par = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34

					
					RESULT = new Signature(par	, null, null);				
//Signature(List<FormalParameter> inPars, FormalParameter variadicPar,
 //                    List<FormalParameter> outPars)
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Signature ::= Parameters Resul 
            {
              Signature RESULT =null;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<FormalParameter> par = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location resxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location resxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> res = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35

            		RESULT = new Signature(par	, null, res);	
            	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Resul ::= Parameters 
            {
              List<FormalParameter> RESULT =null;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> par = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 RESULT = par; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Resul",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Resul ::= Type 
            {
              List<FormalParameter> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 List<FormalParameter> p = new LinkedList<>();
			p.add(new FormalParameter("",type));
			RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Resul",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Parameters ::= LPAR RPAR 
            {
              List<FormalParameter> RESULT =null;
		//@@CUPDBG38
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Parameters ::= LPAR ParameterList RPAR 
            {
              List<FormalParameter> RESULT =null;
		Location parListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<FormalParameter> parList = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG39
 RESULT = parList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Parameters ::= LPAR TypeList RPAR 
            {
              List<FormalParameter> RESULT =null;
		Location typeListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typeListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Type> typeList = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG40
 List<FormalParameter> p = new LinkedList<>();
					for(Type t : typeList)					
						p.add(new FormalParameter(null,t));
					RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParameterList ::= ParameterDeclList 
            {
              List<FormalParameter> RESULT =null;
		Location parDecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location parDecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> parDec = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 RESULT = parDec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParameterList ::= ID DOTDOTDOT Type 
            {
              List<FormalParameter> RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 List<FormalParameter> p = new LinkedList<>();
					p.add(new FormalParameter(nm,type));
					RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParameterList ::= ID DOTDOTDOT Type COMMA 
            {
              List<FormalParameter> RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG43
 List<FormalParameter> p = new LinkedList<>();
					p.add(new FormalParameter(nm,type));
					RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParameterDeclList ::= IdentifierList Type COMMA ParameterDeclList 
            {
              List<FormalParameter> RESULT =null;
		Location lnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> lname = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location parDecListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location parDecListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> parDecList = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 
						for(String s : lname)
							parDecList.add(0,new FormalParameter(s,type));
						RESULT = parDecList;
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParameterDeclList ::= IdentifierList Type COMMA 
            {
              List<FormalParameter> RESULT =null;
		Location lnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> lname = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG45
 
						List<FormalParameter> p = new LinkedList<>();
						for(String s : lname)
							p.add(new FormalParameter(s,type));
						RESULT = p;
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParameterDeclList ::= IdentifierList Type 
            {
              List<FormalParameter> RESULT =null;
		Location lnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<String> lname = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
 
						List<FormalParameter> p = new LinkedList<>();
						for(String s : lname)
							p.add(new FormalParameter(s,type));
						RESULT = p;
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParameterDeclList ::= IdentifierList Type COMMA ID DOTDOTDOT Type COMMA 
            {
              List<FormalParameter> RESULT =null;
		Location lnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location lnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		List<String> lname = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG47
 
						List<FormalParameter> p = new LinkedList<>();
						for(String s : lname)
							p.add(new FormalParameter(s,type));
						p.add(new FormalParameter(id,tp));

//class Pair<A,B> {
//  public A fst;
//  public B snd;
//}


						//RESULT = new Pair<>(p, new Pair<>(id, tp));
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ParameterDeclList ::= IdentifierList Type COMMA ID DOTDOTDOT Type 
            {
              List<FormalParameter> RESULT =null;
		Location lnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location lnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		List<String> lname = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48
 
						List<FormalParameter> p = new LinkedList<>();
						for(String s : lname)
							p.add(new FormalParameter(s,type));
						p.add(new FormalParameter(id,tp));
						RESULT = p;
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TypeList ::= Types 
            {
              List<Type> RESULT =null;
		Location typesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Type> types = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
RESULT = types; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TypeList ::= DOTDOTDOT Type COMMA 
            {
              List<Type> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG50
	List<Type> tp = new LinkedList<>();
				tp.add(type);
				RESULT = tp; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TypeList ::= DOTDOTDOT Type 
            {
              List<Type> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
	List<Type> tp = new LinkedList<>();
				tp.add(type);
				RESULT = tp; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Types ::= ID COMMA Types 
            {
              List<Type> RESULT =null;
		Location typesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Type> types = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
RESULT = types; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Types ::= ID COMMA DOTDOTDOT Type COMMA 
            {
              List<Type> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG53
	List<Type> tp = new LinkedList<>();
				tp.add(type);
				RESULT = tp; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Types ::= ID COMMA DOTDOTDOT Type 
            {
              List<Type> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
	List<Type> tp = new LinkedList<>();
				tp.add(type);
				RESULT = tp; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Types ::= ID COMMA 
            {
              List<Type> RESULT =null;
		//@@CUPDBG55
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Types ::= ID 
            {
              List<Type> RESULT =null;
		//@@CUPDBG56
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Types ::= TypeLit COMMA Types 
            {
              List<Type> RESULT =null;
		Location typeLitxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typeLitxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type typeLit = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Type> types = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG57
 types.add(0,typeLit); 
			RESULT = types;	
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Types ::= TypeLit COMMA DOTDOTDOT Type COMMA 
            {
              List<Type> RESULT =null;
		Location tplxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tplxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type tpl = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG58
 List<Type> tp = new LinkedList<>();
				tp.add(tpl);
				tp.add(type);
				RESULT = tp; 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Types ::= TypeLit COMMA DOTDOTDOT Type 
            {
              List<Type> RESULT =null;
		Location tplxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tplxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type tpl = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59
 List<Type> tp = new LinkedList<>();
				tp.add(tpl);
				tp.add(type);
				RESULT = tp; 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Types ::= TypeLit COMMA 
            {
              List<Type> RESULT =null;
		Location tplxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tplxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type tpl = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG60
 List<Type> tp = new LinkedList<>();
				tp.add(tpl);				
				RESULT = tp; 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Types ::= TypeLit 
            {
              List<Type> RESULT =null;
		Location tplxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tplxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type tpl = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
 List<Type> tp = new LinkedList<>();
				tp.add(tpl);				
				RESULT = tp; 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IdentifierList ::= ID COMMA IdentifierList 
            {
              List<String> RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 ids.add(0,nm);
					RESULT = ids;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IdentifierList ::= ID 
            {
              List<String> RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63
			
					
					List<String> name = new LinkedList<>();
					name.add(nm);		
					System.out.println("Identificador = "+ nm);							
					RESULT = name;
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ConstDecl ::= CONST IdentifierList 
            {
              List<ConstDecl> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64
 List<ConstDecl> constDecls = new LinkedList<>(); 
			   for (String id: ids)
					constDecls.add(new ConstDecl(id, null, null));
				RESULT = constDecls;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ConstDecl ::= CONST IdentifierList ASSIGN ExpressionList 
            {
              List<ConstDecl> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65

				List<ConstDecl> constDecls = new LinkedList<>();
				Iterator<String> idIt = ids.iterator();
				Iterator<Expression> expIt = exps.iterator();
				while ( idIt.hasNext() && expIt.hasNext() )
					constDecls.add( new ConstDecl(idIt.next(), null, expIt.next()));
				if (idIt.hasNext() || expIt.hasNext())
					 //ERRO.report("erro na declaração de constantes");
			    RESULT = constDecls;
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ConstDecl ::= CONST IdentifierList Type ASSIGN ExpressionList 
            {
              List<ConstDecl> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66

				List<ConstDecl> constDecls = new LinkedList<>();
				Iterator<String> idIt = ids.iterator();				
				Iterator<Expression> expIt = exps.iterator();
				while ( idIt.hasNext() && expIt.hasNext() )
					constDecls.add( new ConstDecl(idIt.next(), type, expIt.next()));
				if (idIt.hasNext() || expIt.hasNext())
					//ERRO.report("erro na declaração de constantes");
			    RESULT = constDecls;
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              List<Expression> RESULT =null;
		Location expsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 exps.add(exp);
					RESULT = exps;
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpressionList ::= Expression 
            {
              List<Expression> RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68

					List<Expression> ex = new LinkedList<>();
					ex.add(exp);
					RESULT = ex;
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= Expression PLUS Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
	RESULT = new BinaryExpression(BinaryOperator.PLUS,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= Expression MINUS Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70
	RESULT = new BinaryExpression(BinaryOperator.MINUS,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression ::= Expression TIMES Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71
	RESULT = new BinaryExpression(BinaryOperator.TIMES,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression ::= Expression DIV Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG72
	RESULT = new BinaryExpression(BinaryOperator.DIV,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression ::= Expression LT Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG73
	RESULT = new BinaryExpression(BinaryOperator.LT,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= Expression EQ Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74
	RESULT = new BinaryExpression(BinaryOperator.EQ,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= Expression AND Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75
	RESULT = new BinaryExpression(BinaryOperator.AND,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= UnaryExpr 
            {
              Expression RESULT =null;
		Location uexpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uexpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnaryExpression uexp = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
RESULT = uexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UnaryExpr ::= PrimaryExpr 
            {
              UnaryExpression RESULT =null;
		Location pexpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pexpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression pexp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
 RESULT = new UnaryExpression(null,pexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UnaryExpr ::= unary_op UnaryExpr 
            {
              UnaryExpression RESULT =null;
		Location uopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location uopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		UnaryOperator uop = (UnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location uexpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uexpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		UnaryExpression uexp = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG78

				RESULT = new UnaryExpression(uop, uexp);	
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary_op ::= PLUS 
            {
              UnaryOperator RESULT =null;
		//@@CUPDBG79
 RESULT = UnaryOperator.PLUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_op",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unary_op ::= MINUS 
            {
              UnaryOperator RESULT =null;
		//@@CUPDBG80
 RESULT = UnaryOperator.MINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_op",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unary_op ::= TIMES 
            {
              UnaryOperator RESULT =null;
		//@@CUPDBG81
 RESULT = UnaryOperator.POINTED_BY; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_op",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unary_op ::= NOT 
            {
              UnaryOperator RESULT =null;
		//@@CUPDBG82
 RESULT = UnaryOperator.NOT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_op",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PrimaryExpr ::= Operand 
            {
              Expression RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression op = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83
 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PrimaryExpr ::= PrimaryExpr DOT ID 
            {
              Expression RESULT =null;
		Location pexpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pexpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression pexp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG84
 RESULT = pexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PrimaryExpr ::= PrimaryExpr LSBRACK Expression RSBRACK 
            {
              Expression RESULT =null;
		Location uexpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location uexpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression uexp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG85
 IndexExpression index = new IndexExpression(uexp,exp);
				RESULT = index;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrimaryExpr ::= PrimaryExpr LSBRACK Slice RSBRACK 
            {
              Expression RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location slicexpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slicexpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression slicexp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG86
 //slicexp.exp = exp;  Verificar se é um SliceExpress ou um FullSliceExpress?
                 RESULT = slicexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PrimaryExpr ::= PrimaryExpr LPAR Arguments RPAR 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PrimaryExpr ::= PrimaryExpr LPAR RPAR 
            {
              Expression RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG87
 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Slice ::= Expression COLON Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG88
 RESULT = new SliceExpression(null,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Slice ::= Expression COLON 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG89
 RESULT = new SliceExpression(null,exp1,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Slice ::= COLON Expression 
            {
              Expression RESULT =null;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG90
 RESULT = new SliceExpression(null,null,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Slice ::= COLON 
            {
              Expression RESULT =null;
		//@@CUPDBG91
 RESULT = new SliceExpression(null,null,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Slice ::= Expression COLON Expression COLON Expression 
            {
              Expression RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG92
 RESULT = new FullSliceExpression(null,exp1,exp2,exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Slice ::= COLON Expression COLON Expression 
            {
              Expression RESULT =null;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exp3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG93
 RESULT = new FullSliceExpression(null,null,exp2,exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Arguments ::= ExpressionList VariadicCommaOp 
            {
              Pair RESULT =null;
		Location expsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location variadicxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location variadicxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean variadic = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG94
					
					RESULT = new Pair<>(exps,variadic);;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VariadicCommaOp ::= DOTDOTDOT 
            {
              Boolean RESULT =null;
		//@@CUPDBG95
RESULT = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariadicCommaOp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VariadicCommaOp ::= COMMA 
            {
              Boolean RESULT =null;
		//@@CUPDBG96
RESULT = false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariadicCommaOp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VariadicCommaOp ::= DOTDOTDOT COMMA 
            {
              Boolean RESULT =null;
		//@@CUPDBG97
RESULT = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariadicCommaOp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VariadicCommaOp ::= 
            {
              Boolean RESULT =null;
		//@@CUPDBG98
RESULT = false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariadicCommaOp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Operand ::= INT_NUMBER 
            {
              Expression RESULT =null;
		Location intexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location intexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer inte = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG99
 RESULT = new IntLiteral(inte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Operand ::= FLOAT_NUMBER 
            {
              Expression RESULT =null;
		Location floaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location floaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float floa = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG100
 RESULT = new FloatLiteral(floa); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Operand ::= TRUE 
            {
              Expression RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG101
 RESULT = new BooleanLiteral(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Operand ::= FALSE 
            {
              Expression RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG102
 RESULT = new BooleanLiteral(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Operand ::= CompositeLit 
            {
              Expression RESULT =null;
		Location compxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location compxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CompositeLit comp = (CompositeLit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG103
 RESULT = comp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Operand ::= FUNC Function 
            {
              Expression RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FunctionDecl func = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG104
 RESULT = new FunctionLiteral(func.sig, func.body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Operand ::= LPAR Expression RPAR 
            {
              Expression RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG105
 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CompositeLit ::= LiteralType LiteralValue 
            {
              CompositeLit RESULT =null;
		Location Ltypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location Ltypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type Ltype = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Lvaluexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Lvaluexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		LiteralElement Lvalue = (LiteralElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG106
 					
					RESULT = new CompositeLit(Ltype, Lvalue.keyedElems); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompositeLit",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LiteralType ::= StructType 
            {
              Type RESULT =null;
		Location structxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location structxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StructType struct = (StructType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG107
 RESULT = struct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LiteralType ::= ArrayType 
            {
              Type RESULT =null;
		Location arrayxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arrayxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArrayType array = (ArrayType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG108
 RESULT = array; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LiteralType ::= LSBRACK DOTDOTDOT RSBRACK Type 
            {
              Type RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG109
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LiteralType ::= SliceType 
            {
              Type RESULT =null;
		Location slicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SliceType slice = (SliceType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG110
 RESULT = slice; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LiteralValue ::= LBRACK RBRACK 
            {
              LiteralElement RESULT =null;
		//@@CUPDBG111
 RESULT = new LiteralElement(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValue",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LiteralValue ::= LBRACK ElementList RBRACK 
            {
              LiteralElement RESULT =null;
		Location elemsLitxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elemsLitxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<KeyedElement> elemsLit = (List<KeyedElement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG112
 RESULT = new LiteralElement(elemsLit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValue",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ElementList ::= KeyedElement COMMA ElementList 
            {
              List<KeyedElement> RESULT =null;
		Location keyedxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location keyedxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		KeyedElement keyed = (KeyedElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elemsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elemsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<KeyedElement> elems = (List<KeyedElement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG113
 elems.add(0,keyed);
				RESULT = elems; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ElementList ::= KeyedElement 
            {
              List<KeyedElement> RESULT =null;
		Location keyedxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location keyedxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		KeyedElement keyed = (KeyedElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG114
 List<KeyedElement> key = new LinkedList<>();
				 key.add(keyed);
				 RESULT = key;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ElementList ::= KeyedElement COMMA 
            {
              List<KeyedElement> RESULT =null;
		Location keyedxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location keyedxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		KeyedElement keyed = (KeyedElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG115
 List<KeyedElement> key = new LinkedList<>();
				 key.add(keyed);
				 RESULT = key;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // KeyedElement ::= Element 
            {
              KeyedElement RESULT =null;
		Location elmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Element elm = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG116
 RESULT = new KeyedElement(null, elm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // KeyedElement ::= Element COLON Element 
            {
              KeyedElement RESULT =null;
		Location elm1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location elm1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Element elm1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elm2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elm2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Element elm2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG117
 
					ExpressionElement expElem = (ExpressionElement) elm1; // não sei se pode
					RESULT = new KeyedElement(expElem.exp, elm2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Element ::= Expression 
            {
              Element RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG118
 RESULT = new ExpressionElement(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Element ::= LiteralValue 
            {
              Element RESULT =null;
		Location Lvaluexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Lvaluexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		LiteralElement Lvalue = (LiteralElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG119
 RESULT = Lvalue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ReceiverType ::= ID 
            {
              TypeName RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG120
 RESULT = new TypeName(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReceiverType",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ReceiverType ::= LPAR TIMES ID LPAR 
            {
              TypeName RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG121
 RESULT = new TypeName(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReceiverType",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ReceiverType ::= LPAR ReceiverType RPAR 
            {
              TypeName RESULT =null;
		Location receiverxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location receiverxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeName receiver = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG122
 RESULT = receiver; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReceiverType",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VarDecl ::= VAR VarSpec 
            {
              List<VarDecl> RESULT =null;
		Location varDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VarDecl> varDecl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG123
							
				RESULT = varDecl; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VarDecl ::= VAR LPAR VarSpecList RPAR 
            {
              List<VarDecl> RESULT =null;
		Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<VarDecl> varDecls = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG124
			
				RESULT = varDecls; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VarSpecList ::= VarSpecList VarSpec SEMICOLON 
            {
              List<VarDecl> RESULT =null;
		Location varDecls1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varDecls1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<VarDecl> varDecls1 = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location varDecls2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varDecls2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<VarDecl> varDecls2 = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG125
 varDecls1.addAll(varDecls2); 
				   RESULT = varDecls1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VarSpecList ::= 
            {
              List<VarDecl> RESULT =null;
		//@@CUPDBG126
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VarSpec ::= IdentifierList Type 
            {
              List<VarDecl> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG127
 List<VarDecl> varDecls = new LinkedList<>(); 
			   for (String id: ids)
					varDecls.add(new VarDecl(id, type, null));
			   RESULT = varDecls;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VarSpec ::= IdentifierList ASSIGN ExpressionList 
            {
              List<VarDecl> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG128

		  		List<VarDecl> varSpec = new LinkedList<>();
				Iterator<String> idIt = ids.iterator();
				Iterator<Expression> expIt = exps.iterator();
				while(idIt.hasNext() && expIt.hasNext())					
					varSpec.add(new VarDecl(idIt.next(),null,expIt.next()));
				
				
				if(idIt.hasNext() || expIt.hasNext())
					System.out.println("ERRO  de Atribuição");

				RESULT = varSpec;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VarSpec ::= IdentifierList Type ASSIGN ExpressionList 
            {
              List<VarDecl> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG129

		  		List<VarDecl> varSpec = new LinkedList<>();
				Iterator<String> idIt = ids.iterator();
				Iterator<Expression> expIt = exps.iterator();	
							
				while(idIt.hasNext() && expIt.hasNext())						
					varSpec.add(new VarDecl(idIt.next(),type,expIt.next()));	
							
				
				if(idIt.hasNext() || expIt.hasNext())
					System.out.println("ERRO  de Atribuição");
				RESULT = varSpec;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FunctionDecl ::= FUNC ID Function 
            {
              FunctionDecl RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location funDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location funDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FunctionDecl funDecl = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG130
 funDecl.name = nm;
                    RESULT = funDecl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Function ::= Signature Block 
            {
              FunctionDecl RESULT =null;
		Location sigxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sigxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Signature sig = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location blckxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blckxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block blck = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG131
 RESULT = new FunctionDecl(null, sig, blck); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Block ::= LBRACK StatementList RBRACK 
            {
              Block RESULT =null;
		Location stateListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stateListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Statement> stateList = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG132
 RESULT = new Block(stateList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // StatementList ::= Statement SEMICOLON StatementList 
            {
              List<Statement> RESULT =null;
		Location statexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location statexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Statement state = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stateListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stateListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Statement> stateList = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG133
 stateList.add(0,state);
					RESULT = stateList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // StatementList ::= 
            {
              List<Statement> RESULT =null;
		//@@CUPDBG134
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MethodDecl ::= FUNC LPAR ID ReceiverType RPAR ID Function 
            {
              MethodDecl RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TypeName type = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location functionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location functionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FunctionDecl function = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG135

					FormalParameter fp = new FormalParameter(id,type);
					RESULT = new MethodDecl(fp, nm, function.sig, function.body);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Statement ::= Declaration 
            {
              Statement RESULT =null;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Declaration> dec = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG136
 
					for( Declaration d : dec)
						RESULT = new DeclarationStm(d);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Statement ::= SimpleStmt 
            {
              Statement RESULT =null;
		Location simpleStmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simpleStmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement simpleStm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG137
 RESULT = simpleStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Statement ::= RETURN 
            {
              Statement RESULT =null;
		//@@CUPDBG138
 RESULT = new ReturnStmt(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Statement ::= RETURN ExpressionList 
            {
              Statement RESULT =null;
		Location expsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG139
 RESULT = new ReturnStmt(exps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Statement ::= Block 
            {
              Statement RESULT =null;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG140
 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Statement ::= IfStmt 
            {
              Statement RESULT =null;
		Location ifStmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ifStmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IfStmt ifStm = (IfStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG141
 RESULT = ifStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Statement ::= ForStmt 
            {
              Statement RESULT =null;
		Location forStmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location forStmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ForStmt forStm = (ForStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG142
 RESULT = forStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SimpleStmt ::= Expression 
            {
              Statement RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG143
 RESULT = new ExpressionStmt(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SimpleStmt ::= ExpressionList ASSIGN ExpressionList 
            {
              Statement RESULT =null;
		Location exps1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exps1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> exps1 = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exps2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exps2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> exps2 = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG144

			 	RESULT = new Assignment(exps1,exps2);
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SimpleStmt ::= ExpressionList DASSIGN ExpressionList 
            {
              Statement RESULT =null;
		Location exps1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exps1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> exps1 = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exps2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exps2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> exps2 = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG145

			 	RESULT = new Assignment(exps1,exps2);
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SimpleStmt ::= 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IfStmt ::= IF SimpleStmt SEMICOLON Expression Block ElseOpt 
            {
              IfStmt RESULT =null;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location elseOptxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elseOptxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IfElseStmt elseOpt = (IfElseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG146

				block.stmts.add(elseOpt);
				RESULT = new IfStmt(stm,exp, block);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IfStmt ::= IF Expression Block ElseOpt 
            {
              IfStmt RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location elseOptxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elseOptxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IfElseStmt elseOpt = (IfElseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG147

				block.stmts.add(elseOpt);
				RESULT = new IfStmt(null,exp, block);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ElseOpt ::= ELSE IfStmt 
            {
              IfElseStmt RESULT =null;
		Location ifStmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ifStmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IfStmt ifStm = (IfStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG148

				RESULT = new IfElseStmt(ifStm, null, null, null); // não sei se esta certo
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ElseOpt ::= ELSE Block 
            {
              IfElseStmt RESULT =null;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG149

				RESULT = new IfElseStmt(null, null, block, null); // não sei se esta certo
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ElseOpt ::= 
            {
              IfElseStmt RESULT =null;
		//@@CUPDBG150
 RESULT = new IfElseStmt(new EmptyStmt(), null, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ForStmt ::= FOR Expression Block 
            {
              ForStmt RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG151

				RESULT = new ForStmt(null, exp, null, block);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ForStmt ::= FOR SimpleStmt SEMICOLON SimpleStmt SEMICOLON SimpleStmt Block 
            {
              ForStmt RESULT =null;
		Location stm1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location stm1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Statement stm1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location stm2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location stm2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Statement stm2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stm3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stm3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Statement stm3 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG152

			
			RESULT = new ForStmt(stm1, null, stm3, block); // não sei o que fazer com stm2
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ForStmt ::= FOR RANGE Expression Block 
            {
              ForStmt RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG153

				RESULT = new ForStmt(null,exp,null,body);
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ForStmt ::= FOR ExpressionList DASSIGN RANGE Expression Block 
            {
              ForStmt RESULT =null;
		Location expListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location expListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<Expression> expList = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG154

				
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ForStmt ::= FOR ExpressionList ASSIGN RANGE Expression Block 
            {
              ForStmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Operand ::= ID 
            {
              Expression RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG155
 System.out.println("Entrei em ID: "); RESULT = new IdExpression(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LiteralType ::= ID 
            {
              Type RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG156
 RESULT = new TypeName(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
