
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package SyntacticAnalyzer;

import java.io.FileInputStream;
import LexicalAnalyzer.LexicalAnalyzer;
import java.io.IOException;
import java.nio.file.Paths;
import java_cup.runtime.*;
import java.io.File;
import java.util.*;
import pasito.ast.Program;
import pasito.ast.declaration.*;
import pasito.ast.expression.*;
import pasito.ast.methodSpecOrInterfaceName.*;
import pasito.ast.signature.*;
import pasito.ast.statement.*;
import pasito.ast.topLevelDecl.*;
import pasito.ast.type.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\005\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\011\005\000\002\011\006\000\002\013\006\000\002" +
    "\013\002\000\002\012\003\000\002\012\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\004\000\002\014\006" +
    "\000\002\014\003\000\002\016\006\000\002\015\006\000" +
    "\002\017\005\000\002\021\005\000\002\021\002\000\002" +
    "\020\004\000\002\020\003\000\002\020\004\000\002\023" +
    "\005\000\002\023\002\000\002\022\004\000\002\022\003" +
    "\000\002\024\003\000\002\024\004\000\002\026\003\000" +
    "\002\026\003\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\027\003\000\002\027\005\000\002\027" +
    "\006\000\002\030\006\000\002\030\005\000\002\030\004" +
    "\000\002\030\011\000\002\030\010\000\002\031\003\000" +
    "\002\031\005\000\002\031\004\000\002\032\005\000\002" +
    "\032\007\000\002\032\006\000\002\032\004\000\002\032" +
    "\003\000\002\032\005\000\002\032\007\000\002\032\006" +
    "\000\002\032\004\000\002\032\003\000\002\033\005\000" +
    "\002\033\003\000\002\007\004\000\002\007\006\000\002" +
    "\007\007\000\002\035\005\000\002\035\003\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\003\000\002\041\003\000\002\041\004\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\005\000\002\043\006" +
    "\000\002\043\006\000\002\043\006\000\002\043\005\000" +
    "\002\044\005\000\002\044\004\000\002\044\004\000\002" +
    "\044\003\000\002\044\007\000\002\044\006\000\002\045" +
    "\004\000\002\047\003\000\002\047\003\000\002\047\004" +
    "\000\002\047\002\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\004\000\002\050\005\000\002\051\004\000\002\054" +
    "\003\000\002\054\003\000\002\054\006\000\002\054\003" +
    "\000\002\055\004\000\002\055\005\000\002\060\005\000" +
    "\002\060\003\000\002\060\004\000\002\061\003\000\002" +
    "\061\005\000\002\057\003\000\002\057\003\000\002\056" +
    "\003\000\002\056\006\000\002\056\005\000\002\010\004" +
    "\000\002\010\006\000\002\063\005\000\002\063\002\000" +
    "\002\062\004\000\002\062\005\000\002\062\006\000\002" +
    "\005\005\000\002\052\004\000\002\064\005\000\002\066" +
    "\005\000\002\066\002\000\002\006\011\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\004\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\067\003\000\002\067\005\000\002\067\005\000\002\067" +
    "\002\000\002\071\010\000\002\071\006\000\002\072\004" +
    "\000\002\072\004\000\002\070\005\000\002\070\011\000" +
    "\002\070\006\000\002\070\010\000\002\070\010\000\002" +
    "\050\003\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\014\002\uffff\006\006\013\013\017\017\020" +
    "\012\001\002\000\004\002\u0111\001\002\000\004\055\ufff9" +
    "\001\002\000\006\004\u0102\043\u0103\001\002\000\004\055" +
    "\ufffc\001\002\000\004\055\ufffe\001\002\000\004\055\ufffa" +
    "\001\002\000\006\004\020\043\370\001\002\000\006\004" +
    "\355\043\356\001\002\000\004\055\353\001\002\000\004" +
    "\055\ufffd\001\002\000\004\055\ufffb\001\002\000\004\004" +
    "\020\001\002\000\022\004\uffc4\007\uffc4\012\uffc4\036\uffc4" +
    "\046\uffc4\052\uffc4\054\111\055\uffc4\001\002\000\020\004" +
    "\027\007\031\012\025\036\033\046\024\052\030\055\uffc3" +
    "\001\002\000\004\052\351\001\002\000\014\044\uffee\050" +
    "\uffee\052\uffee\054\uffee\055\uffee\001\002\000\036\004\133" +
    "\006\135\012\025\025\131\026\136\031\130\033\122\034" +
    "\125\035\137\036\121\043\145\046\142\047\173\056\126" +
    "\001\002\000\004\050\337\001\002\000\014\044\ufff3\050" +
    "\ufff3\052\ufff3\054\ufff3\055\ufff3\001\002\000\014\044\ufff4" +
    "\050\ufff4\052\ufff4\054\ufff4\055\ufff4\001\002\000\034\004" +
    "\133\006\135\012\025\025\131\026\136\031\130\033\122" +
    "\034\125\035\137\036\121\043\145\046\142\056\126\001" +
    "\002\000\004\050\036\001\002\000\014\044\ufff1\050\ufff1" +
    "\052\ufff1\054\ufff1\055\ufff1\001\002\000\014\004\027\007" +
    "\031\012\025\036\033\046\024\001\002\000\014\044\ufff2" +
    "\050\ufff2\052\ufff2\054\ufff2\055\ufff2\001\002\000\014\044" +
    "\ufff0\050\ufff0\052\ufff0\054\ufff0\055\ufff0\001\002\000\006" +
    "\004\037\051\uffe4\001\002\000\006\043\047\055\uffe2\001" +
    "\002\000\004\051\044\001\002\000\004\055\042\001\002" +
    "\000\006\004\037\051\uffe4\001\002\000\004\051\uffe5\001" +
    "\002\000\014\044\uffef\050\uffef\052\uffef\054\uffef\055\uffef" +
    "\001\002\000\004\055\uffe3\001\002\000\022\004\027\007" +
    "\031\012\025\036\033\043\047\046\024\050\uffe1\055\uffe1" +
    "\001\002\000\020\004\057\007\031\012\025\036\033\044" +
    "\060\046\024\057\054\001\002\000\004\044\115\001\002" +
    "\000\014\004\027\007\031\012\025\036\033\046\024\001" +
    "\002\000\004\044\uffd2\001\002\000\004\044\104\001\002" +
    "\000\014\004\027\007\031\012\025\036\033\046\024\001" +
    "\002\000\004\044\uffda\001\002\000\006\044\uffc6\054\073" +
    "\001\002\000\022\004\uffc4\007\uffc4\012\uffc4\036\uffc4\044" +
    "\uffcb\046\uffc4\054\061\057\062\001\002\000\022\004\uffdd" +
    "\007\uffdd\012\uffdd\036\uffdd\043\uffdd\046\uffdd\050\uffdd\055" +
    "\uffdd\001\002\000\020\004\070\007\031\012\025\036\033" +
    "\044\uffcc\046\024\057\067\001\002\000\014\004\027\007" +
    "\031\012\025\036\033\046\024\001\002\000\006\044\uffd9" +
    "\054\064\001\002\000\004\044\uffd8\001\002\000\020\004" +
    "\uffc5\007\uffc5\012\uffc5\036\uffc5\046\uffc5\052\uffc5\055\uffc5" +
    "\001\002\000\004\044\uffcf\001\002\000\014\004\027\007" +
    "\031\012\025\036\033\046\024\001\002\000\020\004\uffc4" +
    "\007\uffc4\012\uffc4\036\uffc4\044\uffcb\046\uffc4\054\061\001" +
    "\002\000\006\044\uffcd\054\072\001\002\000\004\044\uffce" +
    "\001\002\000\020\004\076\007\031\012\025\036\033\044" +
    "\uffc7\046\024\057\075\001\002\000\004\044\uffca\001\002" +
    "\000\014\004\027\007\031\012\025\036\033\046\024\001" +
    "\002\000\006\044\uffcb\054\077\001\002\000\020\004\076" +
    "\007\031\012\025\036\033\044\uffcc\046\024\057\067\001" +
    "\002\000\006\044\uffc8\054\101\001\002\000\004\044\uffc9" +
    "\001\002\000\006\044\uffd0\054\103\001\002\000\004\044" +
    "\uffd1\001\002\000\022\004\uffdc\007\uffdc\012\uffdc\036\uffdc" +
    "\043\uffdc\046\uffdc\050\uffdc\055\uffdc\001\002\000\006\044" +
    "\uffd5\054\106\001\002\000\006\004\107\044\uffd6\001\002" +
    "\000\020\004\uffc4\007\uffc4\012\uffc4\036\uffc4\046\uffc4\054" +
    "\111\057\112\001\002\000\004\044\uffd7\001\002\000\004" +
    "\004\020\001\002\000\014\004\027\007\031\012\025\036" +
    "\033\046\024\001\002\000\006\044\uffd3\054\114\001\002" +
    "\000\004\044\uffd4\001\002\000\022\004\uffdb\007\uffdb\012" +
    "\uffdb\036\uffdb\043\uffdb\046\uffdb\050\uffdb\055\uffdb\001\002" +
    "\000\006\050\uffde\055\uffde\001\002\000\006\050\uffe0\055" +
    "\uffe0\001\002\000\006\050\uffdf\055\uffdf\001\002\000\034" +
    "\004\uffb1\006\uffb1\012\uffb1\025\uffb1\026\uffb1\031\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\043\uffb1\046\uffb1\056\uffb1" +
    "\001\002\000\052\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\001\002\000\044\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\044\uffb7\045\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\057\uffb7\060\uffb7\001\002\000\004\050\323\001\002\000" +
    "\034\004\uffb4\006\uffb4\012\uffb4\025\uffb4\026\uffb4\031\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\043\uffb4\046\uffb4\056" +
    "\uffb4\001\002\000\034\004\uffb2\006\uffb2\012\uffb2\025\uffb2" +
    "\026\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\043" +
    "\uffb2\046\uffb2\056\uffb2\001\002\000\004\050\uff97\001\002" +
    "\000\052\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\001\002\000\052\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d" +
    "\055\uff9d\057\uff9d\060\uff9d\061\uff9d\001\002\000\052\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\001\002\000\052\034\uff66\035\uff66\036\uff66\037\uff66\040" +
    "\uff66\041\uff66\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66" +
    "\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66\057" +
    "\uff66\060\uff66\061\uff66\001\002\000\052\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\043\273\044\uffb6\045" +
    "\uffb6\046\272\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\057\uffb6\060\uffb6\061\274\001\002\000" +
    "\004\043\047\001\002\000\052\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\057\uff9c\060\uff9c\061\uff9c\001\002\000\034\004" +
    "\uffb3\006\uffb3\012\uffb3\025\uffb3\026\uffb3\031\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\043\uffb3\046\uffb3\056\uffb3\001" +
    "\002\000\004\050\uff96\001\002\000\052\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\057\uff9b\060\uff9b\061\uff9b\001\002\000" +
    "\040\004\133\006\135\012\025\025\131\026\136\031\130" +
    "\033\122\034\125\035\137\036\121\043\145\046\142\047" +
    "\173\056\126\057\174\001\002\000\006\054\171\055\uffc2" +
    "\001\002\000\004\050\uff94\001\002\000\034\004\133\006" +
    "\135\012\025\025\131\026\136\031\130\033\122\034\125" +
    "\035\137\036\121\043\145\046\142\056\126\001\002\000" +
    "\032\034\154\035\155\036\157\037\156\040\153\041\151" +
    "\044\uffbf\045\152\050\uffbf\054\uffbf\055\uffbf\057\uffbf\001" +
    "\002\000\034\004\133\006\135\012\025\025\131\026\136" +
    "\031\130\033\122\034\125\035\137\036\121\043\145\046" +
    "\142\056\126\001\002\000\044\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\044\uffb5\045\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5" +
    "\060\uffb5\001\002\000\034\004\133\006\135\012\025\025" +
    "\131\026\136\031\130\033\122\034\125\035\137\036\121" +
    "\043\145\046\142\056\126\001\002\000\034\004\133\006" +
    "\135\012\025\025\131\026\136\031\130\033\122\034\125" +
    "\035\137\036\121\043\145\046\142\056\126\001\002\000" +
    "\034\004\133\006\135\012\025\025\131\026\136\031\130" +
    "\033\122\034\125\035\137\036\121\043\145\046\142\056" +
    "\126\001\002\000\034\004\133\006\135\012\025\025\131" +
    "\026\136\031\130\033\122\034\125\035\137\036\121\043" +
    "\145\046\142\056\126\001\002\000\034\004\133\006\135" +
    "\012\025\025\131\026\136\031\130\033\122\034\125\035" +
    "\137\036\121\043\145\046\142\056\126\001\002\000\034" +
    "\004\133\006\135\012\025\025\131\026\136\031\130\033" +
    "\122\034\125\035\137\036\121\043\145\046\142\056\126" +
    "\001\002\000\034\004\133\006\135\012\025\025\131\026" +
    "\136\031\130\033\122\034\125\035\137\036\121\043\145" +
    "\046\142\056\126\001\002\000\044\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\044\uffbc\045\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057" +
    "\uffbc\060\uffbc\001\002\000\044\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\044\uffbb\045\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\057\uffbb" +
    "\060\uffbb\001\002\000\044\034\uffbd\035\uffbd\036\157\037" +
    "\156\040\uffbd\041\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\057\uffbd\060" +
    "\uffbd\001\002\000\044\034\uffbe\035\uffbe\036\157\037\156" +
    "\040\uffbe\041\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe" +
    "\001\002\000\044\034\154\035\155\036\157\037\156\040" +
    "\uffb8\041\151\044\uffb8\045\152\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8\001" +
    "\002\000\044\034\154\035\155\036\157\037\156\040\uffba" +
    "\041\uffba\044\uffba\045\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\001\002" +
    "\000\044\034\154\035\155\036\157\037\156\040\uffb9\041" +
    "\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\057\uffb9\060\uffb9\001\002\000" +
    "\022\034\154\035\155\036\157\037\156\040\153\041\151" +
    "\044\170\045\152\001\002\000\052\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\040\uff99\041\uff99\043\uff99\044\uff99\045\uff99" +
    "\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054" +
    "\uff99\055\uff99\057\uff99\060\uff99\061\uff99\001\002\000\034" +
    "\004\133\006\135\012\025\025\131\026\136\031\130\033" +
    "\122\034\125\035\137\036\121\043\145\046\142\056\126" +
    "\001\002\000\036\034\154\035\155\036\157\037\156\040" +
    "\153\041\151\044\uffc0\045\152\050\uffc0\052\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\057\uffc0\001\002\000\014\004\027\007" +
    "\031\012\025\036\033\046\024\001\002\000\004\047\200" +
    "\001\002\000\022\034\154\035\155\036\157\037\156\040" +
    "\153\041\151\045\152\047\176\001\002\000\014\004\027" +
    "\007\031\012\025\036\033\046\024\001\002\000\014\044" +
    "\uffec\050\uffec\052\uffec\054\uffec\055\uffec\001\002\000\014" +
    "\004\027\007\031\012\025\036\033\046\024\001\002\000" +
    "\004\050\uff95\001\002\000\014\044\uffeb\050\uffeb\052\uffeb" +
    "\054\uffeb\055\uffeb\001\002\000\004\050\206\001\002\000" +
    "\052\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\001\002\000\052\034\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055" +
    "\uff7f\057\uff7f\060\uff7f\061\uff7f\001\002\000\056\004\133" +
    "\006\135\012\025\013\013\016\213\017\017\020\012\021" +
    "\211\022\214\025\131\026\136\031\130\033\122\034\125" +
    "\035\137\036\121\043\145\046\142\050\206\051\uff7c\055" +
    "\uff70\056\126\001\002\000\004\055\uff74\001\002\000\004" +
    "\051\271\001\002\000\040\004\133\006\135\012\025\023" +
    "\245\025\131\026\136\031\130\033\122\034\125\035\137" +
    "\036\121\043\145\046\142\055\uff70\056\126\001\002\000" +
    "\010\052\242\053\241\054\171\001\002\000\036\004\133" +
    "\006\135\012\025\025\131\026\136\031\130\033\122\034" +
    "\125\035\137\036\121\043\145\046\142\055\uff70\056\126" +
    "\001\002\000\036\004\133\006\135\012\025\025\131\026" +
    "\136\031\130\033\122\034\125\035\137\036\121\043\145" +
    "\046\142\055\uff78\056\126\001\002\000\004\055\uff75\001" +
    "\002\000\004\055\uff79\001\002\000\004\055\223\001\002" +
    "\000\032\034\154\035\155\036\157\037\156\040\153\041" +
    "\151\045\152\050\uff73\052\uffbf\053\uffbf\054\uffbf\055\uff73" +
    "\001\002\000\004\055\uff7a\001\002\000\004\055\uff76\001" +
    "\002\000\056\004\133\006\135\012\025\013\013\016\213" +
    "\017\017\020\012\021\211\022\214\025\131\026\136\031" +
    "\130\033\122\034\125\035\137\036\121\043\145\046\142" +
    "\050\206\051\uff7c\055\uff70\056\126\001\002\000\004\051" +
    "\uff7d\001\002\000\006\054\171\055\uff77\001\002\000\004" +
    "\055\235\001\002\000\032\034\154\035\155\036\157\037" +
    "\156\040\153\041\151\045\152\050\206\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uff73\001\002\000\004\014\231\001\002\000" +
    "\006\016\213\050\206\001\002\000\004\055\uff6e\001\002" +
    "\000\004\055\uff6c\001\002\000\004\055\uff6d\001\002\000" +
    "\034\004\133\006\135\012\025\025\131\026\136\031\130" +
    "\033\122\034\125\035\137\036\121\043\145\046\142\056" +
    "\126\001\002\000\022\034\154\035\155\036\157\037\156" +
    "\040\153\041\151\045\152\050\206\001\002\000\004\014" +
    "\231\001\002\000\004\055\uff6f\001\002\000\034\004\133" +
    "\006\135\012\025\025\131\026\136\031\130\033\122\034" +
    "\125\035\137\036\121\043\145\046\142\056\126\001\002" +
    "\000\034\004\133\006\135\012\025\025\131\026\136\031" +
    "\130\033\122\034\125\035\137\036\121\043\145\046\142" +
    "\056\126\001\002\000\010\050\uff72\054\171\055\uff72\001" +
    "\002\000\010\050\uff71\054\171\055\uff71\001\002\000\034" +
    "\004\133\006\135\012\025\025\131\026\136\031\130\033" +
    "\122\034\125\035\137\036\121\043\145\046\142\056\126" +
    "\001\002\000\010\052\260\053\257\054\171\001\002\000" +
    "\004\055\252\001\002\000\032\034\154\035\155\036\157" +
    "\037\156\040\153\041\151\045\152\050\206\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uff73\001\002\000\004\055\uff6b\001\002" +
    "\000\036\004\133\006\135\012\025\025\131\026\136\031" +
    "\130\033\122\034\125\035\137\036\121\043\145\046\142" +
    "\055\uff70\056\126\001\002\000\004\055\254\001\002\000" +
    "\036\004\133\006\135\012\025\025\131\026\136\031\130" +
    "\033\122\034\125\035\137\036\121\043\145\046\142\050" +
    "\uff70\056\126\001\002\000\004\050\206\001\002\000\004" +
    "\055\uff6a\001\002\000\036\004\133\006\135\012\025\023" +
    "\264\025\131\026\136\031\130\033\122\034\125\035\137" +
    "\036\121\043\145\046\142\056\126\001\002\000\036\004" +
    "\133\006\135\012\025\023\261\025\131\026\136\031\130" +
    "\033\122\034\125\035\137\036\121\043\145\046\142\056" +
    "\126\001\002\000\034\004\133\006\135\012\025\025\131" +
    "\026\136\031\130\033\122\034\125\035\137\036\121\043" +
    "\145\046\142\056\126\001\002\000\022\034\154\035\155" +
    "\036\157\037\156\040\153\041\151\045\152\050\206\001" +
    "\002\000\004\055\uff67\001\002\000\034\004\133\006\135" +
    "\012\025\025\131\026\136\031\130\033\122\034\125\035" +
    "\137\036\121\043\145\046\142\056\126\001\002\000\022" +
    "\034\154\035\155\036\157\037\156\040\153\041\151\045" +
    "\152\050\206\001\002\000\004\055\uff68\001\002\000\022" +
    "\034\154\035\155\036\157\037\156\040\153\041\151\045" +
    "\152\050\206\001\002\000\004\055\uff69\001\002\000\054" +
    "\014\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\057\uff7e\060" +
    "\uff7e\061\uff7e\001\002\000\036\004\133\006\135\012\025" +
    "\025\131\026\136\031\130\033\122\034\125\035\137\036" +
    "\121\043\145\046\142\056\126\060\306\001\002\000\036" +
    "\004\133\006\135\012\025\025\131\026\136\031\130\033" +
    "\122\034\125\035\137\036\121\043\145\044\277\046\142" +
    "\056\126\001\002\000\004\004\275\001\002\000\052\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\001\002\000\004\044\305\001\002\000\052\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\057\uffab\060\uffab\061\uffab\001\002" +
    "\000\010\044\uffa0\054\301\057\303\001\002\000\036\004" +
    "\133\006\135\012\025\025\131\026\136\031\130\033\122" +
    "\034\125\035\137\036\121\043\145\044\uffa2\046\142\056" +
    "\126\001\002\000\004\044\uffa4\001\002\000\006\044\uffa3" +
    "\054\304\001\002\000\004\044\uffa1\001\002\000\052\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\057\uffac\060\uffac\061\uffac" +
    "\001\002\000\036\004\133\006\135\012\025\025\131\026" +
    "\136\031\130\033\122\034\125\035\137\036\121\043\145" +
    "\046\142\047\uffa7\056\126\001\002\000\004\047\316\001" +
    "\002\000\024\034\154\035\155\036\157\037\156\040\153" +
    "\041\151\045\152\047\312\060\311\001\002\000\036\004" +
    "\133\006\135\012\025\025\131\026\136\031\130\033\122" +
    "\034\125\035\137\036\121\043\145\046\142\047\uffa9\056" +
    "\126\001\002\000\052\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\057\uffae\060\uffae\061\uffae\001\002\000\024\034\154\035" +
    "\155\036\157\037\156\040\153\041\151\045\152\047\uffaa" +
    "\060\314\001\002\000\034\004\133\006\135\012\025\025" +
    "\131\026\136\031\130\033\122\034\125\035\137\036\121" +
    "\043\145\046\142\056\126\001\002\000\022\034\154\035" +
    "\155\036\157\037\156\040\153\041\151\045\152\047\uffa6" +
    "\001\002\000\052\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\057" +
    "\uffad\060\uffad\061\uffad\001\002\000\024\034\154\035\155" +
    "\036\157\037\156\040\153\041\151\045\152\047\uffa8\060" +
    "\320\001\002\000\034\004\133\006\135\012\025\025\131" +
    "\026\136\031\130\033\122\034\125\035\137\036\121\043" +
    "\145\046\142\056\126\001\002\000\022\034\154\035\155" +
    "\036\157\037\156\040\153\041\151\045\152\047\uffa5\001" +
    "\002\000\052\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98" +
    "\041\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\057\uff98" +
    "\060\uff98\061\uff98\001\002\000\040\004\133\006\135\012" +
    "\025\025\131\026\136\031\130\033\122\034\125\035\137" +
    "\036\121\043\145\046\142\050\323\051\324\056\126\001" +
    "\002\000\052\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\041\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\057\uff93" +
    "\060\uff93\061\uff93\001\002\000\006\051\uff90\054\335\001" +
    "\002\000\010\051\uff8e\054\uff8e\060\333\001\002\000\010" +
    "\051\uff8b\054\uff8b\060\uff8b\001\002\000\004\051\332\001" +
    "\002\000\026\034\154\035\155\036\157\037\156\040\153" +
    "\041\151\045\152\051\uff8c\054\uff8c\060\uff8c\001\002\000" +
    "\052\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\055\uff92\057\uff92\060\uff92" +
    "\061\uff92\001\002\000\036\004\133\006\135\012\025\025" +
    "\131\026\136\031\130\033\122\034\125\035\137\036\121" +
    "\043\145\046\142\050\323\056\126\001\002\000\006\051" +
    "\uff8d\054\uff8d\001\002\000\040\004\133\006\135\012\025" +
    "\025\131\026\136\031\130\033\122\034\125\035\137\036" +
    "\121\043\145\046\142\050\323\051\uff8f\056\126\001\002" +
    "\000\004\051\uff91\001\002\000\010\004\340\036\343\051" +
    "\uffe9\001\002\000\016\004\027\007\031\012\025\036\033" +
    "\046\024\055\uffe7\001\002\000\004\051\347\001\002\000" +
    "\004\055\345\001\002\000\004\004\344\001\002\000\004" +
    "\055\uffe6\001\002\000\010\004\340\036\343\051\uffe9\001" +
    "\002\000\004\051\uffea\001\002\000\014\044\uffed\050\uffed" +
    "\052\uffed\054\uffed\055\uffed\001\002\000\004\055\uffe8\001" +
    "\002\000\034\004\133\006\135\012\025\025\131\026\136" +
    "\031\130\033\122\034\125\035\137\036\121\043\145\046" +
    "\142\056\126\001\002\000\006\054\171\055\uffc1\001\002" +
    "\000\014\002\uffff\006\006\013\013\017\017\020\012\001" +
    "\002\000\004\002\001\001\002\000\014\004\027\007\031" +
    "\012\025\036\033\046\024\001\002\000\006\004\357\044" +
    "\ufff5\001\002\000\014\004\027\007\031\012\025\036\033" +
    "\046\024\001\002\000\004\044\361\001\002\000\004\055" +
    "\ufff7\001\002\000\004\055\363\001\002\000\006\004\357" +
    "\044\ufff5\001\002\000\004\044\ufff6\001\002\000\004\055" +
    "\ufff8\001\002\000\016\004\027\007\031\012\025\036\033" +
    "\046\024\052\376\001\002\000\004\055\uff87\001\002\000" +
    "\006\004\uff84\044\uff84\001\002\000\006\004\020\044\373" +
    "\001\002\000\004\055\374\001\002\000\004\055\uff86\001" +
    "\002\000\006\004\uff85\044\uff85\001\002\000\006\052\u0100" +
    "\055\uff83\001\002\000\034\004\133\006\135\012\025\025" +
    "\131\026\136\031\130\033\122\034\125\035\137\036\121" +
    "\043\145\046\142\056\126\001\002\000\006\054\171\055" +
    "\uff82\001\002\000\034\004\133\006\135\012\025\025\131" +
    "\026\136\031\130\033\122\034\125\035\137\036\121\043" +
    "\145\046\142\056\126\001\002\000\006\054\171\055\uff81" +
    "\001\002\000\004\043\047\001\002\000\004\004\u0104\001" +
    "\002\000\006\004\u0105\043\u0107\001\002\000\004\044\uff8a" +
    "\001\002\000\004\044\u010d\001\002\000\010\004\u0105\036" +
    "\u0109\043\u0107\001\002\000\004\044\u010c\001\002\000\004" +
    "\004\u010a\001\002\000\004\043\u010b\001\002\000\004\044" +
    "\uff89\001\002\000\004\044\uff88\001\002\000\004\004\u010e" +
    "\001\002\000\004\043\047\001\002\000\004\055\uff7b\001" +
    "\002\000\004\055\uff80\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\022\002\003\003\013\004\007\005\014\006" +
    "\006\007\015\010\010\011\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\365\062\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\020\001\001\000\002" +
    "\001\001\000\014\012\021\014\025\015\033\016\031\017" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\137\016\126\017\143\034\174\041\122\042\146\043" +
    "\133\050\131\051\140\054\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\015\137\016" +
    "\126\017\143\034\145\035\142\041\122\042\146\043\133" +
    "\050\131\051\140\054\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\034\014\025\015\033\016\031" +
    "\017\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\040\023\037\001\001\000\006\024\044\025\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\040\023\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\115\014\025\015\033\016" +
    "\031\017\022\025\117\026\116\001\001\000\024\014\055" +
    "\015\033\016\031\017\022\027\052\030\054\031\047\032" +
    "\051\033\050\001\001\000\002\001\001\000\014\012\104" +
    "\014\025\015\033\016\031\017\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\101\014\025\015\033" +
    "\016\031\017\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\055" +
    "\015\033\016\031\017\022\032\065\033\064\001\001\000" +
    "\014\012\062\014\025\015\033\016\031\017\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\070\014\025\015\033\016\031" +
    "\017\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\055\015\033\016\031\017\022" +
    "\032\073\001\001\000\002\001\001\000\014\012\077\014" +
    "\025\015\033\016\031\017\022\001\001\000\002\001\001" +
    "\000\014\014\055\015\033\016\031\017\022\032\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\107\033\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\064\001\001\000\014\012\112\014" +
    "\025\015\033\016\031\017\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\202\025\045\052\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\015\137\016\126\017\143" +
    "\034\174\041\122\042\146\043\133\050\131\051\140\054" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\137\016\126\017\143\034\166\041\122\042\146\043" +
    "\133\050\131\051\140\054\123\001\001\000\002\001\001" +
    "\000\024\015\137\016\126\017\143\041\147\042\146\043" +
    "\133\050\131\051\140\054\123\001\001\000\002\001\001" +
    "\000\026\015\137\016\126\017\143\034\165\041\122\042" +
    "\146\043\133\050\131\051\140\054\123\001\001\000\026" +
    "\015\137\016\126\017\143\034\164\041\122\042\146\043" +
    "\133\050\131\051\140\054\123\001\001\000\026\015\137" +
    "\016\126\017\143\034\163\041\122\042\146\043\133\050" +
    "\131\051\140\054\123\001\001\000\026\015\137\016\126" +
    "\017\143\034\162\041\122\042\146\043\133\050\131\051" +
    "\140\054\123\001\001\000\026\015\137\016\126\017\143" +
    "\034\161\041\122\042\146\043\133\050\131\051\140\054" +
    "\123\001\001\000\026\015\137\016\126\017\143\034\160" +
    "\041\122\042\146\043\133\050\131\051\140\054\123\001" +
    "\001\000\026\015\137\016\126\017\143\034\157\041\122" +
    "\042\146\043\133\050\131\051\140\054\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\137" +
    "\016\126\017\143\034\171\041\122\042\146\043\133\050" +
    "\131\051\140\054\123\001\001\000\002\001\001\000\014" +
    "\012\201\014\025\015\033\016\031\017\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\176\014\025" +
    "\015\033\016\031\017\022\001\001\000\002\001\001\000" +
    "\014\012\200\014\025\015\033\016\031\017\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\004\220" +
    "\007\015\010\010\011\004\015\137\016\126\017\143\034" +
    "\217\035\211\041\122\042\146\043\133\050\131\051\140" +
    "\054\123\064\221\065\216\066\207\067\215\070\206\071" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\015\137\016\126\017\143\034\247\035\245\041\122\042" +
    "\146\043\133\050\131\051\140\054\123\067\246\001\001" +
    "\000\002\001\001\000\032\015\137\016\126\017\143\034" +
    "\226\035\211\041\122\042\146\043\133\050\131\051\140" +
    "\054\123\067\225\001\001\000\030\015\137\016\126\017" +
    "\143\034\145\035\224\041\122\042\146\043\133\050\131" +
    "\051\140\054\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\004\220\007\015\010\010\011" +
    "\004\015\137\016\126\017\143\034\217\035\211\041\122" +
    "\042\146\043\133\050\131\051\140\054\123\064\221\065" +
    "\216\066\223\067\215\070\206\071\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\227\001\001\000\004\072\231\001\001\000\006\064\232" +
    "\071\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\137\016\126\017\143\034\235" +
    "\041\122\042\146\043\133\050\131\051\140\054\123\001" +
    "\001\000\004\064\236\001\001\000\004\072\237\001\001" +
    "\000\002\001\001\000\030\015\137\016\126\017\143\034" +
    "\145\035\243\041\122\042\146\043\133\050\131\051\140" +
    "\054\123\001\001\000\030\015\137\016\126\017\143\034" +
    "\145\035\242\041\122\042\146\043\133\050\131\051\140" +
    "\054\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\137\016\126\017\143\034\266\041\122\042\146" +
    "\043\133\050\131\051\140\054\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\250\001\001\000\002" +
    "\001\001\000\032\015\137\016\126\017\143\034\217\035" +
    "\211\041\122\042\146\043\133\050\131\051\140\054\123" +
    "\067\252\001\001\000\002\001\001\000\032\015\137\016" +
    "\126\017\143\034\217\035\211\041\122\042\146\043\133" +
    "\050\131\051\140\054\123\067\254\001\001\000\004\064" +
    "\255\001\001\000\002\001\001\000\030\015\137\016\126" +
    "\017\143\034\145\035\243\041\122\042\146\043\133\050" +
    "\131\051\140\054\123\001\001\000\030\015\137\016\126" +
    "\017\143\034\145\035\242\041\122\042\146\043\133\050" +
    "\131\051\140\054\123\001\001\000\026\015\137\016\126" +
    "\017\143\034\261\041\122\042\146\043\133\050\131\051" +
    "\140\054\123\001\001\000\004\064\262\001\001\000\002" +
    "\001\001\000\026\015\137\016\126\017\143\034\264\041" +
    "\122\042\146\043\133\050\131\051\140\054\123\001\001" +
    "\000\004\064\265\001\001\000\002\001\001\000\004\064" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\137\016\126\017\143\034\307\041\122\042\146\043" +
    "\133\044\306\050\131\051\140\054\123\001\001\000\032" +
    "\015\137\016\126\017\143\034\145\035\277\041\122\042" +
    "\146\043\133\045\275\050\131\051\140\054\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\301\001\001\000\026\015\137" +
    "\016\126\017\143\034\171\041\122\042\146\043\133\050" +
    "\131\051\140\054\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\015" +
    "\137\016\126\017\143\034\316\041\122\042\146\043\133" +
    "\050\131\051\140\054\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\137\016\126\017\143\034\312" +
    "\041\122\042\146\043\133\050\131\051\140\054\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\137" +
    "\016\126\017\143\034\314\041\122\042\146\043\133\050" +
    "\131\051\140\054\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\137\016\126\017" +
    "\143\034\320\041\122\042\146\043\133\050\131\051\140" +
    "\054\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\015\137\016\126\017\143\034\330\041\122\042\146" +
    "\043\133\050\131\051\140\054\123\055\326\057\325\060" +
    "\327\061\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\015\137\016\126" +
    "\017\143\034\330\041\122\042\146\043\133\050\131\051" +
    "\140\054\123\055\326\057\333\001\001\000\002\001\001" +
    "\000\036\015\137\016\126\017\143\034\330\041\122\042" +
    "\146\043\133\050\131\051\140\054\123\055\326\057\325" +
    "\060\335\061\324\001\001\000\002\001\001\000\006\020" +
    "\341\021\340\001\001\000\014\012\347\014\025\015\033" +
    "\016\031\017\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\341" +
    "\021\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\137\016\126\017\143\034\145" +
    "\035\351\041\122\042\146\043\133\050\131\051\140\054" +
    "\123\001\001\000\002\001\001\000\022\002\353\003\013" +
    "\004\007\005\014\006\006\007\015\010\010\011\004\001" +
    "\001\000\002\001\001\000\014\012\364\014\025\015\033" +
    "\016\031\017\022\001\001\000\004\013\357\001\001\000" +
    "\014\012\361\014\025\015\033\016\031\017\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\374\014\025\015\033\016\031\017\022\001" +
    "\001\000\002\001\001\000\004\063\370\001\001\000\006" +
    "\033\365\062\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\137" +
    "\016\126\017\143\034\145\035\376\041\122\042\146\043" +
    "\133\050\131\051\140\054\123\001\001\000\002\001\001" +
    "\000\030\015\137\016\126\017\143\034\145\035\u0100\041" +
    "\122\042\146\043\133\050\131\051\140\054\123\001\001" +
    "\000\002\001\001\000\010\024\202\025\045\052\u010f\001" +
    "\001\000\002\001\001\000\004\056\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\202\025\045\052\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

    ComplexSymbolFactory f = new ComplexSymbolFactory(); // cria instância do ComplexSymbolFactory
    symbolFactory = f;	
 	 File file = new File("Teste.Pasito");
 	 FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
/*
    File file = new File(Paths.get("").toAbsolutePath().toString() + "/Files4Test/" + "entrada-completa.pas"); // fazendo ler direto o arquivo de entrada em Pasito
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(file);
    } catch (IOException e) {
        e.printStackTrace();
    }*/
    lexer = new LexicalAnalyzer(f,fis); // chamando construtor do LexicalAnalyzer com symbolFactory e arquivo de entrada em pasito

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2

    return lexer.next_token(); // chama próximo token

    }

//@@CUPDBG0

  protected LexicalAnalyzer lexer; // cria objeto LexicalAnalyzer (classe criada pelo JFlex com os automatos)
  

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= TopLevelDecl SEMICOLON Program 
            {
              Program RESULT =null;
		Location topDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location topDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TopLevelDecl> topDecs = (List<TopLevelDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location progxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location progxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Program prog = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 prog.declarations.addAll(0,topDecs);
               RESULT = prog; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              Program RESULT =null;
		//@@CUPDBG4
 RESULT = new Program(new LinkedList<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TopLevelDecl ::= Declaration 
            {
              List<TopLevelDecl> RESULT =null;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TopLevelDecl> decl = (List<TopLevelDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 RESULT = decl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TopLevelDecl ::= FunctionDecl 
            {
              List<TopLevelDecl> RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TopLevelDecl> func = (List<TopLevelDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT  = func; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TopLevelDecl ::= MethodDecl 
            {
              List<TopLevelDecl> RESULT =null;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TopLevelDecl> method = (List<TopLevelDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT  = method; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaration ::= ConstDecl 
            {
              List<TopLevelDecl> RESULT =null;
		Location constDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Declaration> constDecl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 List<TopLevelDecl> tld =  new LinkedList<>();
				  tld.add((TopLevelDecl)constDecl);
				 RESULT = tld;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaration ::= VarDecl 
            {
              List<TopLevelDecl> RESULT =null;
		Location varDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VarDecl> varDecl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
 List<TopLevelDecl> tld =  new LinkedList<>();
				  tld.add((TopLevelDecl) varDecl);
				 RESULT = tld;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= TypeDecl 
            {
              List<TopLevelDecl> RESULT =null;
		Location typeDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Type> typeDecl = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 List<TopLevelDecl> tld =  new LinkedList<>();
				  tld.add((TopLevelDecl) typeDecl);
				 RESULT = tld;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TypeDecl ::= TYPE ID Type 
            {
              List<Type> RESULT =null;
		Location typeDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type typeDecl = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
  List<Type> tp = new LinkedList<>();
				tp.add(typeDecl);
				RESULT = tp;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TypeDecl ::= TYPE LPAR TypeSpecList RPAR 
            {
              List<Type> RESULT =null;
		Location typeDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typeDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Type> typeDecls = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG12
	
				RESULT = typeDecls;	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TypeSpecList ::= ID Type SEMICOLON TypeSpecList 
            {
              List<Type> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Type> types = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
					
					types.add(0,type);
					RESULT = types;
					
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeSpecList ::= 
            {
              List<Type> RESULT =null;
		//@@CUPDBG14
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= ID 
            {
              Type RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 RESULT = new TypeName(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= TypeLit 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeLit ::= ArrayType 
            {
              List<Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeLit ::= StructType 
            {
              List<Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeLit ::= TIMES Type 
            {
              List<Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeLit ::= INTERFACE LBRACK MethodSpecList RBRACK 
            {
              List<Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeLit ::= SliceType 
            {
              List<Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StructType ::= STRUCT LBRACK FieldDeclList RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ArrayType ::= LSBRACK Expression RSBRACK Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SliceType ::= LSBRACK RSBRACK Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SliceType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldDeclList ::= FieldDecl SEMICOLON FieldDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldDecl ::= ID Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FieldDecl ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FieldDecl ::= TIMES ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodSpecList ::= MethodSpec SEMICOLON MethodSpecList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodSpecList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodSpec ::= ID Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodSpec ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Signature ::= Parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Signature ::= Parameters Resul 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Resul ::= Parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Resul",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Resul ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Resul",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Parameters ::= LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Parameters ::= LPAR ParameterList RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Parameters ::= LPAR TypeList RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParameterList ::= ParameterDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParameterList ::= ID DOTDOTDOT Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParameterList ::= ID DOTDOTDOT Type COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParameterDeclList ::= IdentifierList Type COMMA ParameterDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParameterDeclList ::= IdentifierList Type COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParameterDeclList ::= IdentifierList Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParameterDeclList ::= IdentifierList Type COMMA ID DOTDOTDOT Type COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ParameterDeclList ::= IdentifierList Type COMMA ID DOTDOTDOT Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TypeList ::= Types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TypeList ::= DOTDOTDOT Type COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TypeList ::= DOTDOTDOT Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Types ::= ID COMMA Types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Types ::= ID COMMA DOTDOTDOT Type COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Types ::= ID COMMA DOTDOTDOT Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Types ::= ID COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Types ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Types ::= TypeLit COMMA Types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Types ::= TypeLit COMMA DOTDOTDOT Type COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Types ::= TypeLit COMMA DOTDOTDOT Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Types ::= TypeLit COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Types ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IdentifierList ::= ID COMMA IdentifierList 
            {
              List<String> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 List name = new LinkedList<String>(); 
			   		for (String id: ids)
						name.add(id);
					RESULT = name;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IdentifierList ::= ID 
            {
              List<String> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
	
					List name = new LinkedList<String>();
					name.add(id);				
					RESULT = name;
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ConstDecl ::= CONST IdentifierList 
            {
              List<Declaration> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 List<Declaration> constDecls = new LinkedList<>(); 
			   for (String id: ids)
					constDecls.add(new ConstDecl(id, null, null));
				RESULT = constDecls;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ConstDecl ::= CONST IdentifierList ASSIGN ExpressionList 
            {
              List<Declaration> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ConstDecl ::= CONST IdentifierList Type ASSIGN ExpressionList 
            {
              List<Declaration> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpressionList ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= Expression PLUS Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= Expression MINUS Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression ::= Expression TIMES Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression ::= Expression DIV Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression ::= Expression LT Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= Expression EQ Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= Expression AND Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= UnaryExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UnaryExpr ::= PrimaryExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UnaryExpr ::= unary_op UnaryExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_op",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unary_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_op",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unary_op ::= EXCL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_op",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unary_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_op",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PrimaryExpr ::= Operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PrimaryExpr ::= PrimaryExpr DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PrimaryExpr ::= PrimaryExpr LSBRACK Expression RSBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrimaryExpr ::= PrimaryExpr LSBRACK Slice RSBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PrimaryExpr ::= PrimaryExpr LPAR Arguments RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PrimaryExpr ::= PrimaryExpr LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Slice ::= Expression COLON Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Slice ::= Expression COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Slice ::= COLON Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Slice ::= COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Slice ::= Expression COLON Expression COLON Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Slice ::= COLON Expression COLON Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Slice",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Arguments ::= ExpressionList VariadicCommaOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VariadicCommaOp ::= DOTDOTDOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariadicCommaOp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VariadicCommaOp ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariadicCommaOp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VariadicCommaOp ::= DOTDOTDOT COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariadicCommaOp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VariadicCommaOp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariadicCommaOp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Operand ::= INT_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Operand ::= FLOAT_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Operand ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Operand ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Operand ::= CompositeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Operand ::= FUNC Function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Operand ::= LPAR Expression RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CompositeLit ::= LiteralType LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompositeLit",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LiteralType ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LiteralType ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LiteralType ::= LSBRACK DOTDOTDOT RSBRACK Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LiteralType ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LiteralValue ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValue",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LiteralValue ::= LBRACK ElementList RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValue",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ElementList ::= KeyedElement COMMA ElementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ElementList ::= KeyedElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ElementList ::= KeyedElement COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // KeyedElement ::= Element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // KeyedElement ::= Element COLON Element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Element ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Element ::= LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ReceiverType ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReceiverType",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ReceiverType ::= LPAR TIMES ID LPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReceiverType",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ReceiverType ::= LPAR ReceiverType RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReceiverType",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VarDecl ::= VAR VarSpec 
            {
              List<VarDecl> RESULT =null;
		Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VarDecl> varDecls = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = varDecls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VarDecl ::= VAR LPAR VarSpecList RPAR 
            {
              List<VarDecl> RESULT =null;
		Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<VarDecl> varDecls = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG20
 RESULT = varDecls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VarSpecList ::= VarSpecList VarSpec SEMICOLON 
            {
              List<VarDecl> RESULT =null;
		Location varDecls1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varDecls1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<VarDecl> varDecls1 = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location varDecls2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varDecls2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<VarDecl> varDecls2 = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG21
 varDecls1.addAll(varDecls2); 
				   RESULT = varDecls1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VarSpecList ::= 
            {
              List<VarDecl> RESULT =null;
		//@@CUPDBG22
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VarSpec ::= IdentifierList Type 
            {
              List<VarDecl> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
 List<VarDecl> varDecls = new LinkedList<>(); 
			   for (String id: ids)
					varDecls.add(new VarDecl(id, type, null));
			   RESULT = varDecls;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VarSpec ::= IdentifierList ASSIGN ExpressionList 
            {
              List<VarDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VarSpec ::= IdentifierList Type ASSIGN ExpressionList 
            {
              List<VarDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FunctionDecl ::= FUNC ID Function 
            {
              List<TopLevelDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Function ::= Signature Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Block ::= LBRACK StatementList RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // StatementList ::= Statement SEMICOLON StatementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MethodDecl ::= FUNC LPAR ID ReceiverType RPAR ID Function 
            {
              List<TopLevelDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Statement ::= SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Statement ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Statement ::= RETURN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Statement ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Statement ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SimpleStmt ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SimpleStmt ::= ExpressionList ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SimpleStmt ::= ExpressionList DASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SimpleStmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IfStmt ::= IF SimpleStmt SEMICOLON Expression Block ElseOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IfStmt ::= IF Expression Block ElseOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ElseOpt ::= ELSE IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ElseOpt ::= ELSE Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ForStmt ::= FOR Expression Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ForStmt ::= FOR SimpleStmt SEMICOLON SimpleStmt SEMICOLON SimpleStmt Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ForStmt ::= FOR RANGE Expression Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ForStmt ::= FOR ExpressionList DASSIGN RANGE Expression Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ForStmt ::= FOR ExpressionList ASSIGN RANGE Expression Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Operand ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LiteralType ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
