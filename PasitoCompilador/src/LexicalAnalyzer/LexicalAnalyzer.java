/* The following code was generated by JFlex 1.3.5 on 29/09/17 00:26 */

package LexicalAnalyzer; // pacote ao qual pertencer√° a classe gerada pelo jflex

import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory;
import java.io.IOException;
import java_cup.runtime.Symbol;
import SyntacticAnalyzer.sym;
import java.io.FileInputStream;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 29/09/17 00:26 from the specification file
 * <tt>file:/C:/Users/ROBSON/Desktop/PasitoCompilador/src/LexicalAnalyzer/Pasito.jflex</tt>
 */
public class LexicalAnalyzer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 2;
  final public static int YYINITIAL = 0;
  final public static int ST_STRING = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\10\1\3\1\1\1\0\1\3\1\2\16\10\4\0\1\3\1\45"+
    "\1\70\1\0\1\7\1\0\1\42\1\0\1\53\1\54\1\6\1\40"+
    "\1\52\1\41\1\12\1\5\1\11\1\35\1\17\1\16\1\26\1\34"+
    "\1\25\1\34\2\4\1\46\1\20\1\43\1\44\3\0\1\36\1\36"+
    "\1\36\1\36\1\36\1\21\2\7\1\13\1\7\1\7\1\7\1\7"+
    "\1\7\1\7\1\7\1\7\1\7\1\7\4\7\1\37\2\7\1\55"+
    "\1\71\1\56\1\0\1\7\1\0\1\24\1\61\1\51\1\62\1\31"+
    "\1\32\1\65\1\64\1\50\2\7\1\22\1\7\1\14\1\23\1\47"+
    "\1\7\1\27\1\33\1\15\1\30\1\67\1\63\1\37\1\66\1\7"+
    "\1\57\1\0\1\60\1\0\41\10\2\0\4\7\4\0\1\7\2\0"+
    "\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0"+
    "\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0"+
    "\160\10\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0\3\7"+
    "\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10"+
    "\2\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7\7\0\1\7"+
    "\1\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10"+
    "\10\0\33\7\5\0\3\7\15\0\5\10\6\0\1\7\4\0\13\10"+
    "\5\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10"+
    "\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0"+
    "\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7\13\10"+
    "\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7\5\0\26\7"+
    "\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7\3\10"+
    "\104\0\1\7\1\0\13\7\67\0\33\10\1\0\4\10\66\7\3\10"+
    "\1\7\22\10\1\7\7\10\12\7\2\10\2\0\12\10\1\0\7\7"+
    "\1\0\7\7\1\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7"+
    "\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10"+
    "\2\0\2\10\2\0\3\10\1\7\10\0\1\10\4\0\2\7\1\0"+
    "\3\7\2\10\2\0\12\10\4\7\7\0\1\7\5\0\3\10\1\0"+
    "\6\7\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0"+
    "\3\10\3\0\1\10\7\0\4\7\1\0\1\7\7\0\14\10\3\7"+
    "\1\10\13\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10\1\0"+
    "\3\10\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0\12\10"+
    "\1\0\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\7\10"+
    "\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0\3\7"+
    "\2\10\2\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7"+
    "\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\3\0\3\7\3\0\14\7\4\0\5\10\3\0\3\10"+
    "\1\0\4\10\2\0\1\7\6\0\1\10\16\0\12\10\11\0\1\7"+
    "\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7"+
    "\1\0\5\7\3\0\1\7\7\10\1\0\3\10\1\0\4\10\7\0"+
    "\2\10\1\0\2\7\6\0\2\7\2\10\2\0\12\10\22\0\2\10"+
    "\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7"+
    "\2\0\1\10\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\7\0\1\7\1\0\2\7\2\10\2\0\12\10\1\0\2\7\17\0"+
    "\2\10\1\0\10\7\1\0\3\7\1\0\51\7\2\0\1\7\7\10"+
    "\1\0\3\10\1\0\4\10\1\7\10\0\1\10\10\0\2\7\2\10"+
    "\2\0\12\10\12\0\6\7\2\0\2\10\1\0\22\7\3\0\30\7"+
    "\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10"+
    "\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7"+
    "\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7"+
    "\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7"+
    "\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7"+
    "\1\0\6\10\2\0\12\10\2\0\4\7\40\0\1\7\27\0\2\10"+
    "\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10"+
    "\10\7\1\0\44\7\4\0\24\10\1\0\2\10\5\7\13\10\1\0"+
    "\44\10\11\0\1\10\71\0\53\7\24\10\1\7\12\10\6\0\6\7"+
    "\4\10\4\7\3\10\1\7\3\10\2\7\7\10\3\7\4\10\15\7"+
    "\14\10\1\7\17\10\2\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\53\7\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0"+
    "\4\7\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7\14\0"+
    "\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7\17\0"+
    "\15\7\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7\2\10"+
    "\14\0\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0"+
    "\1\7\3\0\2\7\1\10\2\0\12\10\41\0\3\10\2\0\12\10"+
    "\6\0\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0\35\7"+
    "\3\0\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\13\0"+
    "\54\7\4\0\21\10\7\7\2\10\6\0\12\10\46\0\27\7\5\10"+
    "\4\0\65\7\12\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0"+
    "\1\7\130\0\5\10\57\7\21\10\7\7\4\0\12\10\21\0\11\10"+
    "\14\0\3\10\36\7\15\10\2\7\12\10\54\7\16\10\14\0\44\7"+
    "\24\10\10\0\12\10\3\0\3\7\12\10\44\7\122\0\3\10\1\0"+
    "\25\10\4\7\1\10\4\7\3\10\2\7\11\0\300\7\47\10\25\0"+
    "\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7"+
    "\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7"+
    "\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0\5\10"+
    "\32\0\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0\6\10"+
    "\1\0\1\7\15\0\1\7\20\0\15\7\3\0\33\7\25\0\15\10"+
    "\4\0\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0\12\7"+
    "\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7"+
    "\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0\4\7"+
    "\3\10\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0\70\7"+
    "\7\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10"+
    "\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7"+
    "\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7"+
    "\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0\56\7"+
    "\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10\4\0"+
    "\12\10\1\0\31\7\7\0\1\10\120\7\2\10\45\0\11\7\2\0"+
    "\147\7\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7\1\10"+
    "\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0\64\7"+
    "\14\0\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7\3\0"+
    "\1\7\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0\35\7"+
    "\3\0\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7\16\10"+
    "\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7\3\0"+
    "\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10\5\7"+
    "\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10\2\0"+
    "\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7"+
    "\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10\6\0"+
    "\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7\46\0"+
    "\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7\1\0"+
    "\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0"+
    "\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10\20\0"+
    "\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0"+
    "\207\7\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7\4\0"+
    "\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7\2\0"+
    "\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    58,   116,   116,   174,   116,   116,   232,   290,   116, 
      348,   406,   464,   522,   580,   116,   638,   696,   754,   812, 
      870,   116,   116,   928,   116,   986,   116,  1044,  1102,  1160, 
      116,   116,   116,   116,   116,   116,   116,  1218,  1276,  1334, 
     1392,  1450,  1508,  1566,  1624,  1682,  1740,  1798,  1856,  1914, 
     1972,  2030,  2088,  2146,  2204,  2262,  2320,  2378,  2436,  2494, 
     2552,  2610,  2668,   116,   116,   116,  2726,   348,  2784,  2842, 
     2900,  2958,  3016,   116,   116,   116,   116,  3074,  3132,  3190, 
     3248,  1914,   116,  3306,  3364,  3422,  3480,  3538,  3596,  3654, 
      348,  3712,  3770,  3828,  3886,  3944,  4002,  4060,  4118,  4176, 
      348,  4234,  4292,  4350,   348,   348,  4408,  4466,  4524,   348, 
     4582,  4640,   348,  4698,  4756,  4814,  4872,   348,  4930,  4988, 
     5046,  5104,  5162,  5220,   348,  5278,  5336,   348,  5394,  5452, 
     5510,   348,  5568,  5626,  5684,  5742,   116,  5800,   348,  5858, 
      348,   348,  5916,  5974,  6032,  6090,  6148,  6206,  6264,  6322, 
      348,   348,  6380,  6438,   116,  6496,  6554,  6612,  6670,  6728, 
      348,  6786,   116,  6844,  6902,   348,  6960,  7018,  7076,  7134, 
     1682
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\4\1\14\1\15\1\16\1\13\1\17\2\10\1\20"+
    "\1\21\3\13\2\10\1\22\1\13\1\23\1\24\1\25"+
    "\2\10\2\13\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\13\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\4\13\1\50\2\4"+
    "\1\51\2\0\65\51\1\0\1\52\74\0\1\6\73\0"+
    "\1\10\4\0\1\10\1\53\3\0\2\10\5\0\2\10"+
    "\5\0\2\10\41\0\1\54\1\55\67\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\0\17\13\7\0\3\13\7\0"+
    "\7\13\6\0\1\56\4\0\1\57\1\53\3\0\2\60"+
    "\5\0\2\61\5\0\1\61\1\60\1\0\1\62\36\0"+
    "\1\53\4\0\1\53\1\63\3\0\2\53\5\0\2\53"+
    "\5\0\2\53\40\0\1\13\2\0\3\13\1\0\1\13"+
    "\1\64\3\13\1\0\17\13\7\0\3\13\7\0\7\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\6\13"+
    "\1\65\10\13\7\0\3\13\7\0\5\13\1\66\1\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\1\13"+
    "\1\67\15\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\5\13\1\0\3\13\1\70\4\13"+
    "\1\71\6\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\5\13\1\0\1\13\1\72\15\13"+
    "\7\0\3\13\7\0\7\13\6\0\1\13\2\0\3\13"+
    "\1\0\5\13\1\0\2\13\1\73\1\74\3\13\1\75"+
    "\7\13\7\0\3\13\7\0\7\13\6\0\1\13\2\0"+
    "\3\13\1\0\2\13\1\76\2\13\1\0\17\13\7\0"+
    "\3\13\7\0\2\13\1\77\4\13\44\0\1\100\73\0"+
    "\1\101\71\0\1\102\31\0\1\13\2\0\3\13\1\0"+
    "\1\13\1\103\3\13\1\0\11\13\1\104\5\13\7\0"+
    "\3\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\2\13\1\105\1\106\13\13\7\0\3\13"+
    "\7\0\7\13\6\0\1\13\2\0\3\13\1\0\5\13"+
    "\1\0\2\13\1\107\14\13\7\0\3\13\7\0\7\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\10\13"+
    "\1\110\6\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\5\13\1\0\3\13\1\111\13\13"+
    "\7\0\3\13\7\0\7\13\2\0\1\51\2\0\65\51"+
    "\16\0\1\112\1\113\11\0\1\114\40\0\1\115\5\0"+
    "\1\53\4\0\1\53\4\0\2\53\5\0\2\53\5\0"+
    "\2\53\34\0\1\54\1\116\1\7\67\54\6\55\1\117"+
    "\63\55\4\0\1\56\4\0\1\56\1\53\3\0\2\56"+
    "\5\0\2\56\5\0\2\56\40\0\1\56\4\0\1\57"+
    "\1\53\3\0\2\60\5\0\2\61\5\0\1\61\1\60"+
    "\40\0\1\56\4\0\1\61\1\53\3\0\2\61\5\0"+
    "\2\61\5\0\2\61\40\0\1\56\4\0\1\120\1\53"+
    "\3\0\2\120\5\0\2\120\5\0\2\120\40\0\1\121"+
    "\4\0\1\122\4\0\2\121\1\0\1\121\2\0\3\121"+
    "\2\0\2\121\1\0\3\121\12\0\1\121\7\0\2\121"+
    "\21\0\1\123\63\0\1\13\2\0\3\13\1\0\2\13"+
    "\1\124\2\13\1\0\17\13\7\0\3\13\7\0\7\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\7\13"+
    "\1\125\7\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\5\13\1\0\17\13\7\0\1\126"+
    "\2\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\2\13\1\127\14\13\7\0\3\13\7\0"+
    "\7\13\6\0\1\13\2\0\3\13\1\0\1\13\1\130"+
    "\3\13\1\0\17\13\7\0\3\13\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\2\13\1\131\2\13\1\0"+
    "\17\13\7\0\3\13\7\0\7\13\6\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\0\12\13\1\132\4\13\7\0"+
    "\3\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\6\13\1\133\10\13\7\0\3\13\7\0"+
    "\7\13\6\0\1\13\2\0\3\13\1\0\5\13\1\0"+
    "\1\13\1\134\15\13\7\0\3\13\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\1\13\1\135\3\13\1\0"+
    "\17\13\7\0\3\13\7\0\7\13\6\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\0\6\13\1\136\10\13\7\0"+
    "\3\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\17\13\7\0\1\13\1\137\1\13\7\0"+
    "\7\13\6\0\1\13\2\0\3\13\1\0\2\13\1\140"+
    "\2\13\1\0\17\13\7\0\3\13\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\1\13\1\141\3\13\1\0"+
    "\17\13\7\0\3\13\7\0\7\13\6\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\0\12\13\1\142\4\13\7\0"+
    "\3\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\2\13\1\143\14\13\7\0\3\13\7\0"+
    "\7\13\6\0\1\13\2\0\3\13\1\0\5\13\1\0"+
    "\11\13\1\144\5\13\7\0\3\13\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\5\13\1\0\6\13\1\145"+
    "\10\13\7\0\3\13\7\0\7\13\4\0\1\7\67\0"+
    "\5\55\1\7\1\117\63\55\4\0\1\56\4\0\1\146"+
    "\1\53\3\0\2\146\5\0\2\146\5\0\2\146\40\0"+
    "\1\147\4\0\1\147\4\0\2\147\1\0\1\147\2\0"+
    "\3\147\2\0\2\147\1\0\3\147\12\0\1\147\7\0"+
    "\2\147\13\0\1\13\2\0\3\13\1\0\3\13\1\150"+
    "\1\13\1\0\17\13\7\0\3\13\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\5\13\1\0\10\13\1\151"+
    "\6\13\7\0\3\13\7\0\7\13\6\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\0\10\13\1\152\6\13\7\0"+
    "\3\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\3\13\1\153\13\13\7\0\3\13\7\0"+
    "\7\13\6\0\1\13\2\0\3\13\1\0\5\13\1\0"+
    "\17\13\7\0\3\13\7\0\4\13\1\154\2\13\6\0"+
    "\1\13\2\0\3\13\1\0\5\13\1\0\7\13\1\155"+
    "\7\13\7\0\3\13\7\0\7\13\6\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\0\10\13\1\156\6\13\7\0"+
    "\3\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\1\13\1\157\10\13\1\160\4\13\7\0"+
    "\3\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\17\13\7\0\2\13\1\161\7\0\7\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\7\13"+
    "\1\162\7\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\2\13\1\163\2\13\1\0\17\13"+
    "\7\0\3\13\7\0\7\13\6\0\1\13\2\0\3\13"+
    "\1\0\5\13\1\0\10\13\1\164\6\13\7\0\3\13"+
    "\7\0\7\13\6\0\1\13\2\0\3\13\1\0\5\13"+
    "\1\0\12\13\1\165\4\13\7\0\3\13\7\0\7\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\10\13"+
    "\1\166\6\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\5\13\1\0\1\13\1\167\15\13"+
    "\7\0\3\13\7\0\7\13\6\0\1\13\2\0\3\13"+
    "\1\0\5\13\1\0\3\13\1\170\13\13\7\0\3\13"+
    "\7\0\7\13\6\0\1\56\4\0\1\171\1\53\3\0"+
    "\2\171\5\0\2\171\5\0\2\171\40\0\1\172\4\0"+
    "\1\172\4\0\2\172\1\0\1\172\2\0\3\172\2\0"+
    "\2\172\1\0\3\172\12\0\1\172\7\0\2\172\13\0"+
    "\1\13\2\0\3\13\1\0\4\13\1\173\1\0\17\13"+
    "\7\0\3\13\7\0\7\13\6\0\1\13\2\0\3\13"+
    "\1\0\2\13\1\174\2\13\1\0\17\13\7\0\3\13"+
    "\7\0\7\13\6\0\1\13\2\0\3\13\1\0\5\13"+
    "\1\0\10\13\1\175\6\13\7\0\3\13\7\0\7\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\6\13"+
    "\1\176\10\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\2\13\1\177\2\13\1\0\17\13"+
    "\7\0\3\13\7\0\7\13\6\0\1\13\2\0\3\13"+
    "\1\0\5\13\1\0\10\13\1\200\6\13\7\0\3\13"+
    "\7\0\7\13\6\0\1\13\2\0\3\13\1\0\5\13"+
    "\1\0\17\13\7\0\2\13\1\201\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\5\13\1\0\17\13\7\0"+
    "\2\13\1\202\7\0\7\13\6\0\1\13\2\0\3\13"+
    "\1\0\5\13\1\0\6\13\1\203\10\13\7\0\3\13"+
    "\7\0\7\13\6\0\1\13\2\0\3\13\1\0\2\13"+
    "\1\204\2\13\1\0\17\13\7\0\3\13\7\0\7\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\10\13"+
    "\1\205\6\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\5\13\1\0\7\13\1\206\7\13"+
    "\7\0\3\13\7\0\7\13\6\0\1\56\4\0\1\207"+
    "\1\53\3\0\2\207\5\0\2\207\5\0\2\207\40\0"+
    "\1\210\4\0\1\210\4\0\2\210\1\0\1\210\2\0"+
    "\3\210\2\0\2\210\1\0\3\210\12\0\1\210\7\0"+
    "\2\210\13\0\1\13\2\0\3\13\1\0\5\13\1\211"+
    "\17\13\7\0\3\13\7\0\7\13\6\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\0\4\13\1\212\12\13\7\0"+
    "\3\13\7\0\7\13\6\0\1\13\2\0\3\13\1\0"+
    "\1\13\1\213\3\13\1\0\17\13\7\0\3\13\7\0"+
    "\7\13\6\0\1\13\2\0\3\13\1\0\5\13\1\0"+
    "\17\13\7\0\3\13\7\0\3\13\1\214\3\13\6\0"+
    "\1\13\2\0\3\13\1\0\2\13\1\215\2\13\1\0"+
    "\17\13\7\0\3\13\7\0\7\13\6\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\0\17\13\7\0\3\13\7\0"+
    "\3\13\1\216\3\13\6\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\11\13\1\217\5\13\7\0\3\13\7\0"+
    "\7\13\6\0\1\13\2\0\3\13\1\0\5\13\1\0"+
    "\3\13\1\220\13\13\7\0\3\13\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\5\13\1\0\1\13\1\221"+
    "\15\13\7\0\3\13\7\0\7\13\6\0\1\56\4\0"+
    "\1\222\1\53\3\0\2\222\5\0\2\222\5\0\2\222"+
    "\40\0\1\223\4\0\1\223\4\0\2\223\1\0\1\223"+
    "\2\0\3\223\2\0\2\223\1\0\3\223\12\0\1\223"+
    "\7\0\2\223\13\0\1\13\2\0\3\13\1\0\5\13"+
    "\1\0\5\13\1\224\11\13\7\0\3\13\7\0\7\13"+
    "\6\0\1\13\2\0\3\13\1\0\5\13\1\0\6\13"+
    "\1\225\10\13\7\0\3\13\7\0\7\13\6\0\1\13"+
    "\2\0\3\13\1\0\5\13\1\0\3\13\1\226\13\13"+
    "\7\0\3\13\7\0\7\13\6\0\1\13\2\0\3\13"+
    "\1\0\1\13\1\227\3\13\1\0\17\13\7\0\3\13"+
    "\7\0\7\13\6\0\1\13\2\0\3\13\1\0\2\13"+
    "\1\230\2\13\1\0\17\13\7\0\3\13\7\0\7\13"+
    "\6\0\1\56\4\0\1\231\1\53\3\0\2\231\5\0"+
    "\2\231\5\0\2\231\40\0\1\232\4\0\1\232\4\0"+
    "\2\232\1\0\1\232\2\0\3\232\2\0\2\232\1\0"+
    "\3\232\12\0\1\232\7\0\2\232\13\0\1\13\2\0"+
    "\3\13\1\0\5\13\1\233\17\13\7\0\3\13\7\0"+
    "\7\13\6\0\1\13\2\0\3\13\1\0\5\13\1\0"+
    "\2\13\1\234\14\13\7\0\3\13\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\5\13\1\0\17\13\7\0"+
    "\2\13\1\235\7\0\7\13\6\0\1\56\4\0\1\236"+
    "\1\53\3\0\2\236\5\0\2\236\5\0\2\236\40\0"+
    "\1\237\4\0\1\237\4\0\2\237\1\0\1\237\2\0"+
    "\3\237\2\0\2\237\1\0\3\237\12\0\1\237\7\0"+
    "\2\237\13\0\1\13\2\0\3\13\1\0\5\13\1\0"+
    "\7\13\1\240\7\13\7\0\3\13\7\0\7\13\6\0"+
    "\1\13\2\0\3\13\1\0\5\13\1\0\10\13\1\241"+
    "\6\13\7\0\3\13\7\0\7\13\6\0\1\56\4\0"+
    "\1\242\1\53\3\0\2\242\5\0\2\242\5\0\2\242"+
    "\40\0\1\243\4\0\1\243\4\0\2\243\1\0\1\243"+
    "\2\0\3\243\2\0\2\243\1\0\3\243\12\0\1\243"+
    "\7\0\2\243\13\0\1\13\2\0\3\13\1\0\5\13"+
    "\1\0\17\13\7\0\3\13\7\0\4\13\1\244\2\13"+
    "\6\0\1\56\4\0\1\245\1\53\3\0\2\245\5\0"+
    "\2\245\5\0\2\245\40\0\1\13\2\0\3\13\1\0"+
    "\5\13\1\0\17\13\7\0\3\13\7\0\3\13\1\246"+
    "\3\13\6\0\1\56\4\0\1\247\1\53\3\0\2\247"+
    "\5\0\2\247\5\0\2\247\40\0\1\56\4\0\1\250"+
    "\1\53\3\0\2\250\5\0\2\250\5\0\2\250\40\0"+
    "\1\56\4\0\1\251\1\53\3\0\2\251\5\0\2\251"+
    "\5\0\2\251\40\0\1\56\4\0\1\252\1\53\3\0"+
    "\2\252\5\0\2\252\5\0\2\252\40\0\1\56\4\0"+
    "\1\253\1\53\3\0\2\253\5\0\2\253\5\0\2\253"+
    "\34\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  8,  9,  1,  9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  9,  9,  1,  9,  1,  9,  1,  1,  1,  9,  9, 
     9,  9,  9,  9,  9,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  1, 
     1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  1,  0,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	
    private ComplexSymbolFactory symbolFactory;
    public StringBuffer string = new StringBuffer();

    /*
    * Construtor utilizado na chamada do analisador l√©xico pelo CUP
    * @param sf inst√¢ncia da f√°brica de s√≠mbolos implementada pelo CUP que usaremos
    * @param is inst√¢ncia do arquivo de entrada em Pasito que ser√° analisado
    */
    public LexicalAnalyzer(ComplexSymbolFactory sf, FileInputStream is) {
        this(is);
        symbolFactory = sf;
    }
    public LexicalAnalyzer(ComplexSymbolFactory sf, java.io.Reader reader) {
        this(reader);
        symbolFactory = sf;
    }
	
	 public Symbol ultimo;
	 public String tok;
    /*
    * Retorna de s√É¬≠mbolos identificados pelo analisador lexico
    * O simbolo retornado √É¬© um objeto da classe ComplexSymbolFactory implementada pelo CUP
    * Tambem √É¬© retornada a localiza√É¬ß√É¬£o do s√É¬≠mbolo no arquivo, √É¬∫til para fins de feedback ao usu√É¬°rio sobre a  posi√É¬ß√É¬£o do erro (caso haja)
    * Voces provavelmente vao precisar sobrecarregar essa funcao para cobrir todos os tipos de simbolo q vcs precisam retornar
    */
    public Symbol symbol(String nome, int code) {
    	
    	System.out.println("<" + nome + ", " + yytext() + "> (" + yyline + " - " + yycolumn + ")");
    	
        ultimo = symbolFactory.newSymbol(nome, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()));
                                  
       tok = yytext();
       return ultimo;
    }
	
	public Symbol symbol(String nome, int code, Object val) {
    	
    	System.out.println("<" + nome + ", " + yytext() + "> (" + yyline + " - " + yycolumn + ")");
    	
		ultimo = symbolFactory.newSymbol(nome, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()),
                            val);                            
        
	    tok = yytext();
	    return ultimo;
    }
    
    	public Symbol symbol(String nome, int code, String val) {
    	
    	System.out.println("<" + nome + ", " + val + "> (" + yyline + " - " + yycolumn + ")");
    	
        ultimo = symbolFactory.newSymbol(nome, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()),
                            val);
                                    
		tok = yytext();
		return ultimo;
	}

    /*
    * Emite um feedback no console com mensagem de erro, posi√ß√£o e caractere
    */
    protected void emit_warning(String message){
        System.out.println("lexicalAnalyzer warning: " + message + " at : 2 "+
                (yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalyzer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[7192];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2300) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 154: 
          {  return symbol("FLOAT64", FLOAT64, (yytext()) );  }
        case 172: break;
        case 138: 
          {  return symbol("RETURN", RETURN, (yytext()));  }
        case 173: break;
        case 136: 
          {  return symbol("INT32", INT32, (yytext()) );  }
        case 174: break;
        case 112: 
          {  return symbol("FUNC", FUNC, (yytext()) );  }
        case 175: break;
        case 100: 
          {  return symbol("VAR", VAR, (yytext().intern() ) );  }
        case 176: break;
        case 65: 
          {  return symbol("DASSIGN", DASSIGN, (yytext()));  }
        case 177: break;
        case 80: 
        case 81: 
        case 102: 
        case 121: 
        case 135: 
        case 146: 
        case 153: 
        case 158: 
        case 162: 
          {  return symbol ("HEXA",NUMBER, (yytext()));  }
        case 178: break;
        case 117: 
          {  return symbol("CASE",CASE);  }
        case 179: break;
        case 90: 
          {  return symbol("FOR", FOR);  }
        case 180: break;
        case 26: 
          {  return symbol("NOT", NOT);  }
        case 181: break;
        case 4: 
        case 5: 
          {  	String num = "[-]?\\d*[.]?\\d+";
    								String id = "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b";
    								//System.out.println("Ultimo: "+tok);
    								if ( Pattern.matches(num, tok )){ return symbol("SEMICOLON",SEMICOLON);}
    								if ( Pattern.matches(id, tok )){ return symbol("SEMICOLON",SEMICOLON);}
    								if ( tok.equals("return")){ return symbol("SEMICOLON",SEMICOLON);}
    								if ( tok.equals("}")){ return symbol("SEMICOLON",SEMICOLON);}
    								if ( tok.equals("]")){ return symbol("SEMICOLON",SEMICOLON);}
    								if ( tok.equals(")")){ return symbol("SEMICOLON",SEMICOLON);}
    								if ( tok.equals("fallthrough")){ return symbol("SEMICOLON",SEMICOLON);}
    															
    							 }
        case 182: break;
        case 8: 
          {  return symbol("DIV", DIV);  }
        case 183: break;
        case 12: 
          {  return symbol("DOT", DOT);  }
        case 184: break;
        case 40: 
          {  string.append( yytext() );  }
        case 185: break;
        case 63: 
          {  return symbol("AND", AND);  }
        case 186: break;
        case 109: 
          {  return symbol("ELSE", ELSE);  }
        case 187: break;
        case 105: 
          {  return symbol("TYPE", TYPE);  }
        case 188: break;
        case 31: 
          {  return symbol("LPAR", LPAR);  }
        case 189: break;
        case 21: 
          {  return symbol("PLUS", PLUS);  }
        case 190: break;
        case 32: 
          {  return symbol("RPAR", RPAR);  }
        case 191: break;
        case 46: 
        case 47: 
        case 48: 
        case 79: 
        case 101: 
        case 120: 
        case 134: 
        case 145: 
        case 152: 
        case 157: 
        case 161: 
        case 164: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
          {  return symbol ("OCTAL",NUMBER, (yytext()));  }
        case 192: break;
        case 6: 
        case 77: 
          {   }
        case 193: break;
        case 10: 
        case 13: 
        case 14: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 28: 
        case 29: 
        case 37: 
        case 38: 
        case 39: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 66: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 103: 
        case 106: 
        case 107: 
        case 108: 
        case 110: 
        case 111: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 118: 
        case 119: 
        case 122: 
        case 123: 
        case 125: 
        case 126: 
        case 128: 
        case 129: 
        case 130: 
        case 132: 
        case 133: 
        case 137: 
        case 139: 
        case 142: 
        case 143: 
        case 144: 
        case 147: 
        case 148: 
        case 149: 
        case 155: 
        case 156: 
        case 159: 
        case 163: 
          {  return symbol("ID", ID, (yytext().intern() ));  }
        case 194: break;
        case 7: 
        case 11: 
          {  return symbol("INT_NUMBER", INT_NUMBER , new Integer(Integer.parseInt( yytext().intern() ) ) );  }
        case 195: break;
        case 127: 
          {  return symbol("BOOLEAN", FALSE, new Boolean(yytext().intern()));  }
        case 196: break;
        case 104: 
          {  return symbol("BOOLEAN", TRUE, new Boolean(yytext().intern()));  }
        case 197: break;
        case 24: 
          {  return symbol("LT", LT);  }
        case 198: break;
        case 64: 
          {  return symbol("EQ", EQ);  }
        case 199: break;
        case 67: 
          {  return symbol("IF", IF);  }
        case 200: break;
        case 3: 
        case 23: 
          {  emit_warning("Caracter n√£o reconhecido '" + yytext() + "' -- ignorado");  }
        case 201: break;
        case 41: 
          {  string.append('\\');  }
        case 202: break;
        case 73: 
          {  string.append('\n');  }
        case 203: break;
        case 74: 
          {  string.append('\t');  }
        case 204: break;
        case 75: 
          {  string.append('\r');  }
        case 205: break;
        case 76: 
          {  string.append('\"');  }
        case 206: break;
        case 141: 
          {  return symbol("SWITCH", SWITCH);  }
        case 207: break;
        case 140: 
          {  return symbol("STRUCT", STRUCT);  }
        case 208: break;
        case 9: 
          {  return symbol("TIMES", TIMES);  }
        case 209: break;
        case 25: 
          {  return symbol("ASSIGN", ASSIGN);  }
        case 210: break;
        case 165: 
          {  return symbol("FALLTHROUGH", FALLTHROUGH);  }
        case 211: break;
        case 160: 
          {  return symbol("INTERFACE", INTERFACE);  }
        case 212: break;
        case 124: 
          {  return symbol("RANGE", RANGE);  }
        case 213: break;
        case 150: 
          {  return symbol("BOOLEAN", BOOLEAN);  }
        case 214: break;
        case 82: 
          {  return symbol("DOTDOTDOT", DOTDOTDOT);  }
        case 215: break;
        case 22: 
          {  return symbol("MINUS", MINUS);  }
        case 216: break;
        case 42: 
          {  return symbol("FLOAT_NUMBER", FLOAT_NUMBER , new Float(yytext().intern() ));  }
        case 217: break;
        case 15: 
          {  return symbol("SEMICOLON", SEMICOLON, (yytext().intern()) );  }
        case 218: break;
        case 151: 
          {  return symbol("DEFAULT", DEFAULT);  }
        case 219: break;
        case 131: 
          {  return symbol("CONST", CONST);  }
        case 220: break;
        case 30: 
          {  return symbol("COMMA", COMMA);  }
        case 221: break;
        case 27: 
          {  return symbol("COLON", COLON);  }
        case 222: break;
        case 33: 
          {  return symbol("LSBRACK", LSBRACK);  }
        case 223: break;
        case 34: 
          {  return symbol("RSBRACK", RSBRACK);  }
        case 224: break;
        case 35: 
          {  return symbol("LBRACK", LBRACK);  }
        case 225: break;
        case 36: 
          {  return symbol("RBRACK", RBRACK);  }
        case 226: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
